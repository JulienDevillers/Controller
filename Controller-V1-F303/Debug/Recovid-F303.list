
Recovid-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000646c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800660c  0800660c  0001660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006758  08006758  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08006758  08006758  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006758  08006758  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006758  08006758  00016758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003348  20000080  080067e0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200033c8  080067e0  000233c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3ef  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002065  00000000  00000000  0002e49f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d68  00000000  00000000  00030508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c60  00000000  00000000  00031270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ea77  00000000  00000000  00031ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a9f2  00000000  00000000  00050947  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b2196  00000000  00000000  0005b339  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d4cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000416c  00000000  00000000  0010d54c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065f4 	.word	0x080065f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080065f4 	.word	0x080065f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b5b0      	push	{r4, r5, r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fe5f 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f98f 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f000 fab5 	bl	80011b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4a:	f000 fa95 	bl	8001178 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c4e:	f000 fa63 	bl	8001118 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000c52:	f000 f9e9 	bl	8001028 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000c56:	2100      	movs	r1, #0
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 fd09 	bl	8001670 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 fcce 	bl	8001600 <BSP_LED_Init>

  printf("Recovid-F303\n");
 8000c64:	48a6      	ldr	r0, [pc, #664]	; (8000f00 <main+0x2c8>)
 8000c66:	f004 fce5 	bl	8005634 <puts>

  nb_steps= (uint32_t) (STEPS_PER_REVOLUTION)*(Va/360.0);
 8000c6a:	4ba6      	ldr	r3, [pc, #664]	; (8000f04 <main+0x2cc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fc6a 	bl	8000548 <__aeabi_f2d>
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	4ba3      	ldr	r3, [pc, #652]	; (8000f08 <main+0x2d0>)
 8000c7a:	f7ff fde7 	bl	800084c <__aeabi_ddiv>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460c      	mov	r4, r1
 8000c82:	4618      	mov	r0, r3
 8000c84:	4621      	mov	r1, r4
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	4ba0      	ldr	r3, [pc, #640]	; (8000f0c <main+0x2d4>)
 8000c8c:	f7ff fcb4 	bl	80005f8 <__aeabi_dmul>
 8000c90:	4603      	mov	r3, r0
 8000c92:	460c      	mov	r4, r1
 8000c94:	4618      	mov	r0, r3
 8000c96:	4621      	mov	r1, r4
 8000c98:	f7ff ff5e 	bl	8000b58 <__aeabi_d2uiz>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b9b      	ldr	r3, [pc, #620]	; (8000f10 <main+0x2d8>)
 8000ca2:	801a      	strh	r2, [r3, #0]
  double d=MAX_SPEED;
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	4c9a      	ldr	r4, [pc, #616]	; (8000f14 <main+0x2dc>)
 8000caa:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double max=0;
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	f04f 0400 	mov.w	r4, #0
 8000cb6:	e9c7 3402 	strd	r3, r4, [r7, #8]
  Ti=d;
 8000cba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cbe:	f7ff ff6b 	bl	8000b98 <__aeabi_d2f>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	4b94      	ldr	r3, [pc, #592]	; (8000f18 <main+0x2e0>)
 8000cc6:	601a      	str	r2, [r3, #0]
  for(long t=0; t<nb_steps; ++t) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	e058      	b.n	8000d80 <main+0x148>
      d+=(0.15*sqrt((double)(t)/nb_steps));
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fc28 	bl	8000524 <__aeabi_i2d>
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	460d      	mov	r5, r1
 8000cd8:	4b8d      	ldr	r3, [pc, #564]	; (8000f10 <main+0x2d8>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fc21 	bl	8000524 <__aeabi_i2d>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	4629      	mov	r1, r5
 8000cea:	f7ff fdaf 	bl	800084c <__aeabi_ddiv>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460c      	mov	r4, r1
 8000cf2:	ec44 3b17 	vmov	d7, r3, r4
 8000cf6:	eeb0 0a47 	vmov.f32	s0, s14
 8000cfa:	eef0 0a67 	vmov.f32	s1, s15
 8000cfe:	f005 fb6d 	bl	80063dc <sqrt>
 8000d02:	ec51 0b10 	vmov	r0, r1, d0
 8000d06:	a37c      	add	r3, pc, #496	; (adr r3, 8000ef8 <main+0x2c0>)
 8000d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0c:	f7ff fc74 	bl	80005f8 <__aeabi_dmul>
 8000d10:	4603      	mov	r3, r0
 8000d12:	460c      	mov	r4, r1
 8000d14:	461a      	mov	r2, r3
 8000d16:	4623      	mov	r3, r4
 8000d18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d1c:	f7ff fab6 	bl	800028c <__adddf3>
 8000d20:	4603      	mov	r3, r0
 8000d22:	460c      	mov	r4, r1
 8000d24:	e9c7 3404 	strd	r3, r4, [r7, #16]
      Ti+=d;
 8000d28:	4b7b      	ldr	r3, [pc, #492]	; (8000f18 <main+0x2e0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fc0b 	bl	8000548 <__aeabi_f2d>
 8000d32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d36:	f7ff faa9 	bl	800028c <__adddf3>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	460c      	mov	r4, r1
 8000d3e:	4618      	mov	r0, r3
 8000d40:	4621      	mov	r1, r4
 8000d42:	f7ff ff29 	bl	8000b98 <__aeabi_d2f>
 8000d46:	4602      	mov	r2, r0
 8000d48:	4b73      	ldr	r3, [pc, #460]	; (8000f18 <main+0x2e0>)
 8000d4a:	601a      	str	r2, [r3, #0]
      if(d>max) max=d;
 8000d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d54:	f7ff fee0 	bl	8000b18 <__aeabi_dcmpgt>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <main+0x12e>
 8000d5e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000d62:	e9c7 3402 	strd	r3, r4, [r7, #8]
      uwStepPeriod[t]= (uint32_t)d;
 8000d66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d6a:	f7ff fef5 	bl	8000b58 <__aeabi_d2uiz>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b299      	uxth	r1, r3
 8000d72:	4a6a      	ldr	r2, [pc, #424]	; (8000f1c <main+0x2e4>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(long t=0; t<nb_steps; ++t) {
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4b63      	ldr	r3, [pc, #396]	; (8000f10 <main+0x2d8>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	dba0      	blt.n	8000cce <main+0x96>
  }

  printf("Ti=%ld\n", (uint32_t)(Ti/1000));
 8000d8c:	4b62      	ldr	r3, [pc, #392]	; (8000f18 <main+0x2e0>)
 8000d8e:	ed93 7a00 	vldr	s14, [r3]
 8000d92:	eddf 6a63 	vldr	s13, [pc, #396]	; 8000f20 <main+0x2e8>
 8000d96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d9e:	ee17 1a90 	vmov	r1, s15
 8000da2:	4860      	ldr	r0, [pc, #384]	; (8000f24 <main+0x2ec>)
 8000da4:	f004 fbd2 	bl	800554c <iprintf>
  printf("period max=%ld\n", (uint32_t)max);
 8000da8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dac:	f7ff fed4 	bl	8000b58 <__aeabi_d2uiz>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4619      	mov	r1, r3
 8000db4:	485c      	ldr	r0, [pc, #368]	; (8000f28 <main+0x2f0>)
 8000db6:	f004 fbc9 	bl	800554c <iprintf>

	printf("Press button to start.\n");
 8000dba:	485c      	ldr	r0, [pc, #368]	; (8000f2c <main+0x2f4>)
 8000dbc:	f004 fc3a 	bl	8005634 <puts>
	while(BSP_PB_GetState(BUTTON_USER));
 8000dc0:	bf00      	nop
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 fcac 	bl	8001720 <BSP_PB_GetState>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f9      	bne.n	8000dc2 <main+0x18a>
	HAL_Delay(50);
 8000dce:	2032      	movs	r0, #50	; 0x32
 8000dd0:	f000 fdfc 	bl	80019cc <HAL_Delay>
	while(!BSP_PB_GetState(BUTTON_USER));
 8000dd4:	bf00      	nop
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 fca2 	bl	8001720 <BSP_PB_GetState>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f9      	beq.n	8000dd6 <main+0x19e>
	HAL_Delay(50);
 8000de2:	2032      	movs	r0, #50	; 0x32
 8000de4:	f000 fdf2 	bl	80019cc <HAL_Delay>

	printf("Running\n");
 8000de8:	4851      	ldr	r0, [pc, #324]	; (8000f30 <main+0x2f8>)
 8000dea:	f004 fc23 	bl	8005634 <puts>

	// Enable motor
	HAL_GPIO_WritePin(MOTOR_ENA_GPIO_Port, MOTOR_ENA_Pin, SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	4850      	ldr	r0, [pc, #320]	; (8000f34 <main+0x2fc>)
 8000df4:	f001 fa72 	bl	80022dc <HAL_GPIO_WritePin>

	state=CTRL_STOPPED;
 8000df8:	4b4f      	ldr	r3, [pc, #316]	; (8000f38 <main+0x300>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		state= CTRL_INHALE;
 8000dfe:	4b4e      	ldr	r3, [pc, #312]	; (8000f38 <main+0x300>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
		printf("INHALE\n");
 8000e04:	484d      	ldr	r0, [pc, #308]	; (8000f3c <main+0x304>)
 8000e06:	f004 fc15 	bl	8005634 <puts>

		// Start pulse MAX speed
		htim17.Init.Period = MAX_SPEED;
 8000e0a:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <main+0x308>)
 8000e0c:	2278      	movs	r2, #120	; 0x78
 8000e0e:	60da      	str	r2, [r3, #12]
	  HAL_TIM_Base_Init(&htim17);
 8000e10:	484b      	ldr	r0, [pc, #300]	; (8000f40 <main+0x308>)
 8000e12:	f002 fdfd 	bl	8003a10 <HAL_TIM_Base_Init>

		// Rotate CCW : inhalation

	  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2140      	movs	r1, #64	; 0x40
 8000e1a:	484a      	ldr	r0, [pc, #296]	; (8000f44 <main+0x30c>)
 8000e1c:	f001 fa5e 	bl	80022dc <HAL_GPIO_WritePin>

	  // HIGH PEEP
		HAL_GPIO_WritePin(PEEP_GPIO_Port, PEEP_Pin, RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f001 fa57 	bl	80022dc <HAL_GPIO_WritePin>

		//##- Start DMA Burst transfer
		HAL_TIM_DMABurst_MultiWriteStart(&htim17, TIM_DMABASE_ARR, TIM_DMA_UPDATE,	(uint32_t*)uwStepPeriod, TIM_DMABURSTLENGTH_1TRANSFER, nb_steps);
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <main+0x2d8>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	2300      	movs	r3, #0
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <main+0x2e4>)
 8000e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3e:	210b      	movs	r1, #11
 8000e40:	483f      	ldr	r0, [pc, #252]	; (8000f40 <main+0x308>)
 8000e42:	f003 f831 	bl	8003ea8 <HAL_TIM_DMABurst_MultiWriteStart>


		done=0;
 8000e46:	4b40      	ldr	r3, [pc, #256]	; (8000f48 <main+0x310>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
		time= HAL_GetTick();
 8000e4c:	f000 fdb2 	bl	80019b4 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <main+0x314>)
 8000e54:	601a      	str	r2, [r3, #0]

		//##- Start PWM signal generation
		HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000e56:	2100      	movs	r1, #0
 8000e58:	4839      	ldr	r0, [pc, #228]	; (8000f40 <main+0x308>)
 8000e5a:	f002 fe39 	bl	8003ad0 <HAL_TIM_PWM_Start>

		// Wait for motion end.
		while(!done);
 8000e5e:	bf00      	nop
 8000e60:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <main+0x310>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0fa      	beq.n	8000e60 <main+0x228>
		// PWM is stopped in DMA transfert complete callback

		time= HAL_GetTick() -time;
 8000e6a:	f000 fda3 	bl	80019b4 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <main+0x314>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	4a35      	ldr	r2, [pc, #212]	; (8000f4c <main+0x314>)
 8000e78:	6013      	str	r3, [r2, #0]
		printf("time=%lu\n", time);
 8000e7a:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <main+0x314>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4833      	ldr	r0, [pc, #204]	; (8000f50 <main+0x318>)
 8000e82:	f004 fb63 	bl	800554c <iprintf>

		// Inhalation pause : Tplat
		state= CTRL_EXHALE;
 8000e86:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <main+0x300>)
 8000e88:	2203      	movs	r2, #3
 8000e8a:	701a      	strb	r2, [r3, #0]
		printf("TPLAT\n");
 8000e8c:	4831      	ldr	r0, [pc, #196]	; (8000f54 <main+0x31c>)
 8000e8e:	f004 fbd1 	bl	8005634 <puts>
		HAL_Delay(500);
 8000e92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e96:	f000 fd99 	bl	80019cc <HAL_Delay>



		state= CTRL_EXHALE;
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <main+0x300>)
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	701a      	strb	r2, [r3, #0]
		printf("EXHALE\n");
 8000ea0:	482d      	ldr	r0, [pc, #180]	; (8000f58 <main+0x320>)
 8000ea2:	f004 fbc7 	bl	8005634 <puts>

		// LOW PEEP
		HAL_GPIO_WritePin(PEEP_GPIO_Port, PEEP_Pin, SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f001 fa14 	bl	80022dc <HAL_GPIO_WritePin>

		// pulse for release speed
		htim17.Init.Period = EXHALE_SPEED;
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <main+0x308>)
 8000eb6:	22c8      	movs	r2, #200	; 0xc8
 8000eb8:	60da      	str	r2, [r3, #12]
	  HAL_TIM_Base_Init(&htim17);
 8000eba:	4821      	ldr	r0, [pc, #132]	; (8000f40 <main+0x308>)
 8000ebc:	f002 fda8 	bl	8003a10 <HAL_TIM_Base_Init>

	  home = 0;
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <main+0x324>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
		// Rotate CW : Exhalation
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2140      	movs	r1, #64	; 0x40
 8000eca:	481e      	ldr	r0, [pc, #120]	; (8000f44 <main+0x30c>)
 8000ecc:	f001 fa06 	bl	80022dc <HAL_GPIO_WritePin>
	  //##- Start PWM signal generation
		HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	481b      	ldr	r0, [pc, #108]	; (8000f40 <main+0x308>)
 8000ed4:	f002 fdfc 	bl	8003ad0 <HAL_TIM_PWM_Start>


		HAL_Delay(1500);
 8000ed8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000edc:	f000 fd76 	bl	80019cc <HAL_Delay>
		// home will be set in EXTI interrupt handler. PWM will also be stopped.
		while(!home);
 8000ee0:	bf00      	nop
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <main+0x324>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0fa      	beq.n	8000ee2 <main+0x2aa>


		printf("Cycle done\n");
 8000eec:	481c      	ldr	r0, [pc, #112]	; (8000f60 <main+0x328>)
 8000eee:	f004 fba1 	bl	8005634 <puts>
		state= CTRL_INHALE;
 8000ef2:	e784      	b.n	8000dfe <main+0x1c6>
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	33333333 	.word	0x33333333
 8000efc:	3fc33333 	.word	0x3fc33333
 8000f00:	0800660c 	.word	0x0800660c
 8000f04:	20000000 	.word	0x20000000
 8000f08:	40768000 	.word	0x40768000
 8000f0c:	40b90000 	.word	0x40b90000
 8000f10:	200000a8 	.word	0x200000a8
 8000f14:	405e0000 	.word	0x405e0000
 8000f18:	200000f4 	.word	0x200000f4
 8000f1c:	200001c0 	.word	0x200001c0
 8000f20:	447a0000 	.word	0x447a0000
 8000f24:	0800661c 	.word	0x0800661c
 8000f28:	08006624 	.word	0x08006624
 8000f2c:	08006634 	.word	0x08006634
 8000f30:	0800664c 	.word	0x0800664c
 8000f34:	48000800 	.word	0x48000800
 8000f38:	200000ec 	.word	0x200000ec
 8000f3c:	08006654 	.word	0x08006654
 8000f40:	200000ac 	.word	0x200000ac
 8000f44:	48000400 	.word	0x48000400
 8000f48:	200000ed 	.word	0x200000ed
 8000f4c:	200000f0 	.word	0x200000f0
 8000f50:	0800665c 	.word	0x0800665c
 8000f54:	08006668 	.word	0x08006668
 8000f58:	08006670 	.word	0x08006670
 8000f5c:	200001bc 	.word	0x200001bc
 8000f60:	08006678 	.word	0x08006678

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0a6      	sub	sp, #152	; 0x98
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f6e:	2228      	movs	r2, #40	; 0x28
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 fae2 	bl	800553c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2258      	movs	r2, #88	; 0x58
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 fad4 	bl	800553c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f94:	2302      	movs	r3, #2
 8000f96:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9c:	2310      	movs	r3, #16
 8000f9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fb0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 f9ba 	bl	800233c <HAL_RCC_OscConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fce:	f000 f9e3 	bl	8001398 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fec:	2102      	movs	r1, #2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 f8ba 	bl	8003168 <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ffa:	f000 f9cd 	bl	8001398 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM17;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <SystemClock_Config+0xc0>)
 8001000:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001006:	2300      	movs	r3, #0
 8001008:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4618      	mov	r0, r3
 800100e:	f002 fae1 	bl	80035d4 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001018:	f000 f9be 	bl	8001398 <Error_Handler>
  }
}
 800101c:	bf00      	nop
 800101e:	3798      	adds	r7, #152	; 0x98
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	01000002 	.word	0x01000002

08001028 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b092      	sub	sp, #72	; 0x48
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800102e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	222c      	movs	r2, #44	; 0x2c
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f004 fa77 	bl	800553c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800104e:	4b30      	ldr	r3, [pc, #192]	; (8001110 <MX_TIM17_Init+0xe8>)
 8001050:	4a30      	ldr	r2, [pc, #192]	; (8001114 <MX_TIM17_Init+0xec>)
 8001052:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 72-1;
 8001054:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <MX_TIM17_Init+0xe8>)
 8001056:	2247      	movs	r2, #71	; 0x47
 8001058:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <MX_TIM17_Init+0xe8>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <MX_TIM17_Init+0xe8>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <MX_TIM17_Init+0xe8>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <MX_TIM17_Init+0xe8>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <MX_TIM17_Init+0xe8>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001078:	4825      	ldr	r0, [pc, #148]	; (8001110 <MX_TIM17_Init+0xe8>)
 800107a:	f002 fcc9 	bl	8003a10 <HAL_TIM_Base_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001084:	f000 f988 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001088:	4821      	ldr	r0, [pc, #132]	; (8001110 <MX_TIM17_Init+0xe8>)
 800108a:	f002 fcec 	bl	8003a66 <HAL_TIM_PWM_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001094:	f000 f980 	bl	8001398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001098:	2360      	movs	r3, #96	; 0x60
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = STEP_PULSE;
 800109c:	230f      	movs	r3, #15
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b8:	2200      	movs	r2, #0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4814      	ldr	r0, [pc, #80]	; (8001110 <MX_TIM17_Init+0xe8>)
 80010be:	f002 fddb 	bl	8003c78 <HAL_TIM_PWM_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 80010c8:	f000 f966 	bl	8001398 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	4619      	mov	r1, r3
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <MX_TIM17_Init+0xe8>)
 80010f4:	f003 fcdc 	bl	8004ab0 <HAL_TIMEx_ConfigBreakDeadTime>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80010fe:	f000 f94b 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001102:	4803      	ldr	r0, [pc, #12]	; (8001110 <MX_TIM17_Init+0xe8>)
 8001104:	f000 f9c4 	bl	8001490 <HAL_TIM_MspPostInit>

}
 8001108:	bf00      	nop
 800110a:	3748      	adds	r7, #72	; 0x48
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200000ac 	.word	0x200000ac
 8001114:	40014800 	.word	0x40014800

08001118 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <MX_USART2_UART_Init+0x5c>)
 8001120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800115c:	f003 fd66 	bl	8004c2c <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001166:	f000 f917 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000013c 	.word	0x2000013c
 8001174:	40004400 	.word	0x40004400

08001178 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_DMA_Init+0x38>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <MX_DMA_Init+0x38>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_DMA_Init+0x38>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	200b      	movs	r0, #11
 800119c:	f000 fd13 	bl	8001bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011a0:	200b      	movs	r0, #11
 80011a2:	f000 fd2c 	bl	8001bfe <HAL_NVIC_EnableIRQ>

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	4b4a      	ldr	r3, [pc, #296]	; (80012f4 <MX_GPIO_Init+0x140>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a49      	ldr	r2, [pc, #292]	; (80012f4 <MX_GPIO_Init+0x140>)
 80011d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011d4:	6153      	str	r3, [r2, #20]
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <MX_GPIO_Init+0x140>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <MX_GPIO_Init+0x140>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4a43      	ldr	r2, [pc, #268]	; (80012f4 <MX_GPIO_Init+0x140>)
 80011e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ec:	6153      	str	r3, [r2, #20]
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <MX_GPIO_Init+0x140>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <MX_GPIO_Init+0x140>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <MX_GPIO_Init+0x140>)
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	6153      	str	r3, [r2, #20]
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <MX_GPIO_Init+0x140>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <MX_GPIO_Init+0x140>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4a37      	ldr	r2, [pc, #220]	; (80012f4 <MX_GPIO_Init+0x140>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121c:	6153      	str	r3, [r2, #20]
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <MX_GPIO_Init+0x140>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PEEP_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001234:	f001 f852 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_ENA_GPIO_Port, MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2180      	movs	r1, #128	; 0x80
 800123c:	482e      	ldr	r0, [pc, #184]	; (80012f8 <MX_GPIO_Init+0x144>)
 800123e:	f001 f84d 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	482d      	ldr	r0, [pc, #180]	; (80012fc <MX_GPIO_Init+0x148>)
 8001248:	f001 f848 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800124c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4825      	ldr	r0, [pc, #148]	; (80012f8 <MX_GPIO_Init+0x144>)
 8001262:	f000 fe99 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PEEP_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PEEP_Pin;
 8001266:	f44f 7390 	mov.w	r3, #288	; 0x120
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f000 fe89 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_ENA_Pin */
  GPIO_InitStruct.Pin = MOTOR_ENA_Pin;
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_ENA_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4816      	ldr	r0, [pc, #88]	; (80012f8 <MX_GPIO_Init+0x144>)
 800129e:	f000 fe7b 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : HOME_Pin */
  GPIO_InitStruct.Pin = HOME_Pin;
 80012a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_GPIO_Init+0x150>)
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HOME_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f000 fe6d 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 80012be:	2340      	movs	r3, #64	; 0x40
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4809      	ldr	r0, [pc, #36]	; (80012fc <MX_GPIO_Init+0x148>)
 80012d6:	f000 fe5f 	bl	8001f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2017      	movs	r0, #23
 80012e0:	f000 fc71 	bl	8001bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012e4:	2017      	movs	r0, #23
 80012e6:	f000 fc8a 	bl	8001bfe <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48000800 	.word	0x48000800
 80012fc:	48000400 	.word	0x48000400
 8001300:	10210000 	.word	0x10210000
 8001304:	10110000 	.word	0x10110000

08001308 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8001310:	1d39      	adds	r1, r7, #4
 8001312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001316:	2201      	movs	r2, #1
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <__io_putchar+0x20>)
 800131a:	f003 fcd5 	bl	8004cc8 <HAL_UART_Transmit>

	return ch;
 800131e:	687b      	ldr	r3, [r7, #4]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000013c 	.word	0x2000013c

0800132c <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	if(htim==&htim17) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d106      	bne.n	800134a <HAL_TIM_PeriodElapsedCallback+0x1e>
		// Stop PWM
		HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 800133c:	2100      	movs	r1, #0
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001340:	f002 fc26 	bl	8003b90 <HAL_TIM_PWM_Stop>
		// Indicate DMA Burst done
		done=1;
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
	}
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000ac 	.word	0x200000ac
 8001358:	200000ed 	.word	0x200000ed

0800135c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==HOME_Pin) {
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800136c:	d10a      	bne.n	8001384 <HAL_GPIO_EXTI_Callback+0x28>
		if(state!=CTRL_INHALE) {
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <HAL_GPIO_EXTI_Callback+0x30>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d006      	beq.n	8001384 <HAL_GPIO_EXTI_Callback+0x28>
			home=1;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_GPIO_EXTI_Callback+0x34>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 800137c:	2100      	movs	r1, #0
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <HAL_GPIO_EXTI_Callback+0x38>)
 8001380:	f002 fc06 	bl	8003b90 <HAL_TIM_PWM_Stop>
		}
	}
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200000ec 	.word	0x200000ec
 8001390:	200001bc 	.word	0x200001bc
 8001394:	200000ac 	.word	0x200000ac

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_MspInit+0x44>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_MspInit+0x44>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6193      	str	r3, [r2, #24]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_MspInit+0x44>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_MspInit+0x44>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_MspInit+0x44>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_MspInit+0x44>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013de:	2007      	movs	r0, #7
 80013e0:	f000 fbe6 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000

080013f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a20      	ldr	r2, [pc, #128]	; (8001480 <HAL_TIM_Base_MspInit+0x90>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d13a      	bne.n	8001478 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_TIM_Base_MspInit+0x94>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a1f      	ldr	r2, [pc, #124]	; (8001484 <HAL_TIM_Base_MspInit+0x94>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_TIM_Base_MspInit+0x94>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM17 DMA Init */
    /* TIM17_CH1_UP Init */
    hdma_tim17_ch1_up.Instance = DMA1_Channel1;
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <HAL_TIM_Base_MspInit+0x9c>)
 800141e:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001422:	2210      	movs	r2, #16
 8001424:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001438:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 800143c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001440:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1_up.Init.Mode = DMA_NORMAL;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 800144a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800144e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001452:	f000 fbee 	bl	8001c32 <HAL_DMA_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 800145c:	f7ff ff9c 	bl	8001398 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1_up);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a09      	ldr	r2, [pc, #36]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim17_ch1_up);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a06      	ldr	r2, [pc, #24]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001470:	621a      	str	r2, [r3, #32]
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40014800 	.word	0x40014800
 8001484:	40021000 	.word	0x40021000
 8001488:	200000f8 	.word	0x200000f8
 800148c:	40020008 	.word	0x40020008

08001490 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <HAL_TIM_MspPostInit+0x64>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d11c      	bne.n	80014ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_TIM_MspPostInit+0x68>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <HAL_TIM_MspPostInit+0x68>)
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	6153      	str	r3, [r2, #20]
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_TIM_MspPostInit+0x68>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration    
    PA7     ------> TIM17_CH1 
    */
    GPIO_InitStruct.Pin = MOTOR_STP_Pin;
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80014da:	2301      	movs	r3, #1
 80014dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_STP_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4619      	mov	r1, r3
 80014e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e8:	f000 fd56 	bl	8001f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	3720      	adds	r7, #32
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40014800 	.word	0x40014800
 80014f8:	40021000 	.word	0x40021000

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_UART_MspInit+0x7c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d128      	bne.n	8001570 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_UART_MspInit+0x80>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a16      	ldr	r2, [pc, #88]	; (800157c <HAL_UART_MspInit+0x80>)
 8001524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_UART_MspInit+0x80>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_UART_MspInit+0x80>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_UART_MspInit+0x80>)
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	6153      	str	r3, [r2, #20]
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_UART_MspInit+0x80>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800154e:	230c      	movs	r3, #12
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155e:	2307      	movs	r3, #7
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f000 fd14 	bl	8001f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40004400 	.word	0x40004400
 800157c:	40021000 	.word	0x40021000

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f000 f9da 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1_up);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <DMA1_Channel1_IRQHandler+0x10>)
 80015e2:	f000 fbcc 	bl	8001d7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200000f8 	.word	0x200000f8

080015f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80015f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015f8:	f000 fe88 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10b      	bne.n	8001628 <BSP_LED_Init+0x28>
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <BSP_LED_Init+0x68>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <BSP_LED_Init+0x68>)
 8001616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161a:	6153      	str	r3, [r2, #20]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <BSP_LED_Init+0x68>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001628:	2320      	movs	r3, #32
 800162a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4a0c      	ldr	r2, [pc, #48]	; (800166c <BSP_LED_Init+0x6c>)
 800163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001640:	f107 020c 	add.w	r2, r7, #12
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fca6 	bl	8001f98 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <BSP_LED_Init+0x6c>)
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	2120      	movs	r1, #32
 8001656:	2200      	movs	r2, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fe3f 	bl	80022dc <HAL_GPIO_WritePin>
}
 800165e:	bf00      	nop
 8001660:	3720      	adds	r7, #32
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	20000004 	.word	0x20000004

08001670 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	460a      	mov	r2, r1
 800167a:	71fb      	strb	r3, [r7, #7]
 800167c:	4613      	mov	r3, r2
 800167e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10b      	bne.n	800169e <BSP_PB_Init+0x2e>
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <BSP_PB_Init+0xa4>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	4a22      	ldr	r2, [pc, #136]	; (8001714 <BSP_PB_Init+0xa4>)
 800168c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001690:	6153      	str	r3, [r2, #20]
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <BSP_PB_Init+0xa4>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800169e:	79bb      	ldrb	r3, [r7, #6]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d112      	bne.n	80016ca <BSP_PB_Init+0x5a>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80016a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ae:	2302      	movs	r3, #2
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4a17      	ldr	r2, [pc, #92]	; (8001718 <BSP_PB_Init+0xa8>)
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	f107 020c 	add.w	r2, r7, #12
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 fc67 	bl	8001f98 <HAL_GPIO_Init>
  }
 
  if(ButtonMode == BUTTON_MODE_EXTI)
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d11c      	bne.n	800170a <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80016d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <BSP_PB_Init+0xac>)
 80016dc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <BSP_PB_Init+0xa8>)
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	f107 020c 	add.w	r2, r7, #12
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fc53 	bl	8001f98 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80016f2:	2328      	movs	r3, #40	; 0x28
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	2200      	movs	r2, #0
 80016f8:	210f      	movs	r1, #15
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fa63 	bl	8001bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001700:	2328      	movs	r3, #40	; 0x28
 8001702:	b25b      	sxtb	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	f000 fa7a 	bl	8001bfe <HAL_NVIC_EnableIRQ>
  }
}
 800170a:	bf00      	nop
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	20000008 	.word	0x20000008
 800171c:	10110000 	.word	0x10110000

08001720 <BSP_PB_GetState>:
  * @param  Button Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <BSP_PB_GetState+0x28>)
 800172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fdb7 	bl	80022ac <HAL_GPIO_ReadPin>
 800173e:	4603      	mov	r3, r0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000008 	.word	0x20000008

0800174c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e00a      	b.n	8001774 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800175e:	f3af 8000 	nop.w
 8001762:	4601      	mov	r1, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	60ba      	str	r2, [r7, #8]
 800176a:	b2ca      	uxtb	r2, r1
 800176c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	429a      	cmp	r2, r3
 800177a:	dbf0      	blt.n	800175e <_read+0x12>
	}

return len;
 800177c:	687b      	ldr	r3, [r7, #4]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e009      	b.n	80017ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	60ba      	str	r2, [r7, #8]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fdb1 	bl	8001308 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf1      	blt.n	8001798 <_write+0x12>
	}
	return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_close>:

int _close(int file)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
	return -1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e6:	605a      	str	r2, [r3, #4]
	return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_isatty>:

int _isatty(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	return 1;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
	return 0;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <_sbrk+0x50>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x16>
		heap_end = &end;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <_sbrk+0x50>)
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <_sbrk+0x54>)
 800183c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <_sbrk+0x50>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <_sbrk+0x50>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	466a      	mov	r2, sp
 800184e:	4293      	cmp	r3, r2
 8001850:	d907      	bls.n	8001862 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001852:	f003 fe49 	bl	80054e8 <__errno>
 8001856:	4602      	mov	r2, r0
 8001858:	230c      	movs	r3, #12
 800185a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	e006      	b.n	8001870 <_sbrk+0x48>
	}

	heap_end += incr;
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <_sbrk+0x50>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a03      	ldr	r2, [pc, #12]	; (8001878 <_sbrk+0x50>)
 800186c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000009c 	.word	0x2000009c
 800187c:	200033c8 	.word	0x200033c8

08001880 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <SystemInit+0x28>)
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800188a:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <SystemInit+0x28>)
 800188c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SystemInit+0x28>)
 8001896:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800189a:	609a      	str	r2, [r3, #8]
#endif
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018b2:	e003      	b.n	80018bc <LoopCopyDataInit>

080018b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018ba:	3104      	adds	r1, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018bc:	480b      	ldr	r0, [pc, #44]	; (80018ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018c4:	d3f6      	bcc.n	80018b4 <CopyDataInit>
	ldr	r2, =_sbss
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018c8:	e002      	b.n	80018d0 <LoopFillZerobss>

080018ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018cc:	f842 3b04 	str.w	r3, [r2], #4

080018d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <LoopForever+0x16>)
	cmp	r2, r3
 80018d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018d4:	d3f9      	bcc.n	80018ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018d6:	f7ff ffd3 	bl	8001880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018da:	f003 fe0b 	bl	80054f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018de:	f7ff f9ab 	bl	8000c38 <main>

080018e2 <LoopForever>:

LoopForever:
    b LoopForever
 80018e2:	e7fe      	b.n	80018e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018e4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80018e8:	08006760 	.word	0x08006760
	ldr	r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018f0:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80018f4:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80018f8:	200033c8 	.word	0x200033c8

080018fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC1_2_IRQHandler>
	...

08001900 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_Init+0x28>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_Init+0x28>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 f94d 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001916:	2000      	movs	r0, #0
 8001918:	f000 f808 	bl	800192c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191c:	f7ff fd44 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40022000 	.word	0x40022000

0800192c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_InitTick+0x54>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_InitTick+0x58>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f965 	bl	8001c1a <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 f92d 	bl	8001bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_InitTick+0x5c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2000000c 	.word	0x2000000c
 8001984:	20000014 	.word	0x20000014
 8001988:	20000010 	.word	0x20000010

0800198c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000014 	.word	0x20000014
 80019b0:	200033c0 	.word	0x200033c0

080019b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	200033c0 	.word	0x200033c0

080019cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff ffee 	bl	80019b4 <HAL_GetTick>
 80019d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d005      	beq.n	80019f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_Delay+0x40>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019f2:	bf00      	nop
 80019f4:	f7ff ffde 	bl	80019b4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8f7      	bhi.n	80019f4 <HAL_Delay+0x28>
  {
  }
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000014 	.word	0x20000014

08001a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <__NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db0b      	blt.n	8001a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f003 021f 	and.w	r2, r3, #31
 8001a8c:	4907      	ldr	r1, [pc, #28]	; (8001aac <__NVIC_EnableIRQ+0x38>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	2001      	movs	r0, #1
 8001a96:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	; (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f7ff ff8e 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff29 	bl	8001a10 <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd8:	f7ff ff3e 	bl	8001a58 <__NVIC_GetPriorityGrouping>
 8001bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff ff8e 	bl	8001b04 <NVIC_EncodePriority>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff5d 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff31 	bl	8001a74 <__NVIC_EnableIRQ>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffa2 	bl	8001b6c <SysTick_Config>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e037      	b.n	8001cb8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f940 	bl	8001f20 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}  
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_DMA_Start_IT+0x20>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e04a      	b.n	8001d76 <HAL_DMA_Start_IT+0xb6>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d13a      	bne.n	8001d68 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0201 	bic.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f8d4 	bl	8001ec4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 020e 	orr.w	r2, r2, #14
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	e00f      	b.n	8001d56 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 020a 	orr.w	r2, r2, #10
 8001d44:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0204 	bic.w	r2, r2, #4
 8001d54:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e005      	b.n	8001d74 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001d70:	2302      	movs	r3, #2
 8001d72:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b084      	sub	sp, #16
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d024      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x72>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01f      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d107      	bne.n	8001dce <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0204 	bic.w	r2, r2, #4
 8001dcc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d06a      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001dee:	e065      	b.n	8001ebc <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	2202      	movs	r2, #2
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d02c      	beq.n	8001e5a <HAL_DMA_IRQHandler+0xdc>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d027      	beq.n	8001e5a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10b      	bne.n	8001e30 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 020a 	bic.w	r2, r2, #10
 8001e26:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	2102      	movs	r1, #2
 8001e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d035      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001e58:	e030      	b.n	8001ebc <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2208      	movs	r2, #8
 8001e60:	409a      	lsls	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d028      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x13e>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d023      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 020e 	bic.w	r2, r2, #14
 8001e82:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e92:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
    }
  }
}  
 8001eba:	e7ff      	b.n	8001ebc <HAL_DMA_IRQHandler+0x13e>
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d108      	bne.n	8001f04 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f02:	e007      	b.n	8001f14 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <DMA_CalcBaseAndBitshift+0x60>)
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d80f      	bhi.n	8001f54 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <DMA_CalcBaseAndBitshift+0x64>)
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <DMA_CalcBaseAndBitshift+0x68>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	009a      	lsls	r2, r3, #2
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <DMA_CalcBaseAndBitshift+0x6c>)
 8001f50:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001f52:	e00e      	b.n	8001f72 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <DMA_CalcBaseAndBitshift+0x70>)
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <DMA_CalcBaseAndBitshift+0x68>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	009a      	lsls	r2, r3, #2
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <DMA_CalcBaseAndBitshift+0x74>)
 8001f70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40020407 	.word	0x40020407
 8001f84:	bffdfff8 	.word	0xbffdfff8
 8001f88:	cccccccd 	.word	0xcccccccd
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	bffdfbf8 	.word	0xbffdfbf8
 8001f94:	40020400 	.word	0x40020400

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa6:	e160      	b.n	800226a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2101      	movs	r1, #1
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8152 	beq.w	8002264 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x38>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b12      	cmp	r3, #18
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d00b      	beq.n	800206c <HAL_GPIO_Init+0xd4>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d007      	beq.n	800206c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002060:	2b11      	cmp	r3, #17
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b12      	cmp	r3, #18
 800206a:	d130      	bne.n	80020ce <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a2:	2201      	movs	r2, #1
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	f003 0201 	and.w	r2, r3, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80ac 	beq.w	8002264 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210c:	4b5e      	ldr	r3, [pc, #376]	; (8002288 <HAL_GPIO_Init+0x2f0>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a5d      	ldr	r2, [pc, #372]	; (8002288 <HAL_GPIO_Init+0x2f0>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b5b      	ldr	r3, [pc, #364]	; (8002288 <HAL_GPIO_Init+0x2f0>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002124:	4a59      	ldr	r2, [pc, #356]	; (800228c <HAL_GPIO_Init+0x2f4>)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800214e:	d025      	beq.n	800219c <HAL_GPIO_Init+0x204>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a4f      	ldr	r2, [pc, #316]	; (8002290 <HAL_GPIO_Init+0x2f8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d01f      	beq.n	8002198 <HAL_GPIO_Init+0x200>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a4e      	ldr	r2, [pc, #312]	; (8002294 <HAL_GPIO_Init+0x2fc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d019      	beq.n	8002194 <HAL_GPIO_Init+0x1fc>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a4d      	ldr	r2, [pc, #308]	; (8002298 <HAL_GPIO_Init+0x300>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <HAL_GPIO_Init+0x1f8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a4c      	ldr	r2, [pc, #304]	; (800229c <HAL_GPIO_Init+0x304>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00d      	beq.n	800218c <HAL_GPIO_Init+0x1f4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a4b      	ldr	r2, [pc, #300]	; (80022a0 <HAL_GPIO_Init+0x308>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <HAL_GPIO_Init+0x1f0>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a4a      	ldr	r2, [pc, #296]	; (80022a4 <HAL_GPIO_Init+0x30c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_GPIO_Init+0x1ec>
 8002180:	2306      	movs	r3, #6
 8002182:	e00c      	b.n	800219e <HAL_GPIO_Init+0x206>
 8002184:	2307      	movs	r3, #7
 8002186:	e00a      	b.n	800219e <HAL_GPIO_Init+0x206>
 8002188:	2305      	movs	r3, #5
 800218a:	e008      	b.n	800219e <HAL_GPIO_Init+0x206>
 800218c:	2304      	movs	r3, #4
 800218e:	e006      	b.n	800219e <HAL_GPIO_Init+0x206>
 8002190:	2303      	movs	r3, #3
 8002192:	e004      	b.n	800219e <HAL_GPIO_Init+0x206>
 8002194:	2302      	movs	r3, #2
 8002196:	e002      	b.n	800219e <HAL_GPIO_Init+0x206>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_GPIO_Init+0x206>
 800219c:	2300      	movs	r3, #0
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	f002 0203 	and.w	r2, r2, #3
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	4093      	lsls	r3, r2
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ae:	4937      	ldr	r1, [pc, #220]	; (800228c <HAL_GPIO_Init+0x2f4>)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021bc:	4b3a      	ldr	r3, [pc, #232]	; (80022a8 <HAL_GPIO_Init+0x310>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_GPIO_Init+0x310>)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021e6:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <HAL_GPIO_Init+0x310>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800220a:	4a27      	ldr	r2, [pc, #156]	; (80022a8 <HAL_GPIO_Init+0x310>)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <HAL_GPIO_Init+0x310>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002234:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <HAL_GPIO_Init+0x310>)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_GPIO_Init+0x310>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <HAL_GPIO_Init+0x310>)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	f47f ae97 	bne.w	8001fa8 <HAL_GPIO_Init+0x10>
  }
}
 800227a:	bf00      	nop
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	40010000 	.word	0x40010000
 8002290:	48000400 	.word	0x48000400
 8002294:	48000800 	.word	0x48000800
 8002298:	48000c00 	.word	0x48000c00
 800229c:	48001000 	.word	0x48001000
 80022a0:	48001400 	.word	0x48001400
 80022a4:	48001800 	.word	0x48001800
 80022a8:	40010400 	.word	0x40010400

080022ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	887b      	ldrh	r3, [r7, #2]
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
 80022c8:	e001      	b.n	80022ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
 80022e8:	4613      	mov	r3, r2
 80022ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f816 	bl	800135c <HAL_GPIO_EXTI_Callback>
  }
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002342:	af00      	add	r7, sp, #0
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	f000 bf01 	b.w	8003158 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8160 	beq.w	8002626 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002366:	4bae      	ldr	r3, [pc, #696]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b04      	cmp	r3, #4
 8002370:	d00c      	beq.n	800238c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002372:	4bab      	ldr	r3, [pc, #684]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b08      	cmp	r3, #8
 800237c:	d159      	bne.n	8002432 <HAL_RCC_OscConfig+0xf6>
 800237e:	4ba8      	ldr	r3, [pc, #672]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238a:	d152      	bne.n	8002432 <HAL_RCC_OscConfig+0xf6>
 800238c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002390:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <HAL_RCC_OscConfig+0x82>
 80023b8:	4b99      	ldr	r3, [pc, #612]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	e015      	b.n	80023ea <HAL_RCC_OscConfig+0xae>
 80023be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80023d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023da:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023e6:	4b8e      	ldr	r3, [pc, #568]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023ee:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80023f2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80023f6:	fa92 f2a2 	rbit	r2, r2
 80023fa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80023fe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002402:	fab2 f282 	clz	r2, r2
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f042 0220 	orr.w	r2, r2, #32
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	f002 021f 	and.w	r2, r2, #31
 8002412:	2101      	movs	r1, #1
 8002414:	fa01 f202 	lsl.w	r2, r1, r2
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8102 	beq.w	8002624 <HAL_RCC_OscConfig+0x2e8>
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 80fc 	bne.w	8002624 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	f000 be93 	b.w	8003158 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x110>
 800243e:	4b78      	ldr	r3, [pc, #480]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a77      	ldr	r2, [pc, #476]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e030      	b.n	80024ae <HAL_RCC_OscConfig+0x172>
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x134>
 8002456:	4b72      	ldr	r3, [pc, #456]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a71      	ldr	r2, [pc, #452]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 800245c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a6e      	ldr	r2, [pc, #440]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 8002468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e01e      	b.n	80024ae <HAL_RCC_OscConfig+0x172>
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800247a:	d10c      	bne.n	8002496 <HAL_RCC_OscConfig+0x15a>
 800247c:	4b68      	ldr	r3, [pc, #416]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a67      	ldr	r2, [pc, #412]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 8002482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b65      	ldr	r3, [pc, #404]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a64      	ldr	r2, [pc, #400]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 800248e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	e00b      	b.n	80024ae <HAL_RCC_OscConfig+0x172>
 8002496:	4b62      	ldr	r3, [pc, #392]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a61      	ldr	r2, [pc, #388]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 800249c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b5f      	ldr	r3, [pc, #380]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a5e      	ldr	r2, [pc, #376]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 80024a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d059      	beq.n	800256c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff fa7c 	bl	80019b4 <HAL_GetTick>
 80024bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c2:	f7ff fa77 	bl	80019b4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d902      	bls.n	80024d8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	f000 be40 	b.w	8003158 <HAL_RCC_OscConfig+0xe1c>
 80024d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024dc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80024ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d102      	bne.n	800250a <HAL_RCC_OscConfig+0x1ce>
 8002504:	4b46      	ldr	r3, [pc, #280]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	e015      	b.n	8002536 <HAL_RCC_OscConfig+0x1fa>
 800250a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800251e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002522:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002526:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002532:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800253a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800253e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002542:	fa92 f2a2 	rbit	r2, r2
 8002546:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800254a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	f042 0220 	orr.w	r2, r2, #32
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f002 021f 	and.w	r2, r2, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0ab      	beq.n	80024c2 <HAL_RCC_OscConfig+0x186>
 800256a:	e05c      	b.n	8002626 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7ff fa22 	bl	80019b4 <HAL_GetTick>
 8002570:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002576:	f7ff fa1d 	bl	80019b4 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d902      	bls.n	800258c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	f000 bde6 	b.w	8003158 <HAL_RCC_OscConfig+0xe1c>
 800258c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002590:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80025a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <HAL_RCC_OscConfig+0x282>
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	e015      	b.n	80025ea <HAL_RCC_OscConfig+0x2ae>
 80025be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80025d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_RCC_OscConfig+0x2e4>)
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ee:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80025f2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80025f6:	fa92 f2a2 	rbit	r2, r2
 80025fa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80025fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002602:	fab2 f282 	clz	r2, r2
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f042 0220 	orr.w	r2, r2, #32
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	f002 021f 	and.w	r2, r2, #31
 8002612:	2101      	movs	r1, #1
 8002614:	fa01 f202 	lsl.w	r2, r1, r2
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1ab      	bne.n	8002576 <HAL_RCC_OscConfig+0x23a>
 800261e:	e002      	b.n	8002626 <HAL_RCC_OscConfig+0x2ea>
 8002620:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8170 	beq.w	8002916 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002636:	4bd0      	ldr	r3, [pc, #832]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00c      	beq.n	800265c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002642:	4bcd      	ldr	r3, [pc, #820]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b08      	cmp	r3, #8
 800264c:	d16d      	bne.n	800272a <HAL_RCC_OscConfig+0x3ee>
 800264e:	4bca      	ldr	r3, [pc, #808]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800265a:	d166      	bne.n	800272a <HAL_RCC_OscConfig+0x3ee>
 800265c:	2302      	movs	r3, #2
 800265e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800266e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d102      	bne.n	800268c <HAL_RCC_OscConfig+0x350>
 8002686:	4bbc      	ldr	r3, [pc, #752]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	e013      	b.n	80026b4 <HAL_RCC_OscConfig+0x378>
 800268c:	2302      	movs	r3, #2
 800268e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800269e:	2302      	movs	r3, #2
 80026a0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026a4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026b0:	4bb1      	ldr	r3, [pc, #708]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	2202      	movs	r2, #2
 80026b6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80026ba:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80026be:	fa92 f2a2 	rbit	r2, r2
 80026c2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80026c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026ca:	fab2 f282 	clz	r2, r2
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	f042 0220 	orr.w	r2, r2, #32
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	f002 021f 	and.w	r2, r2, #31
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f202 	lsl.w	r2, r1, r2
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <HAL_RCC_OscConfig+0x3ba>
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d002      	beq.n	80026f6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f000 bd31 	b.w	8003158 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4ba0      	ldr	r3, [pc, #640]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	21f8      	movs	r1, #248	; 0xf8
 8002706:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800270e:	fa91 f1a1 	rbit	r1, r1
 8002712:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002716:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800271a:	fab1 f181 	clz	r1, r1
 800271e:	b2c9      	uxtb	r1, r1
 8002720:	408b      	lsls	r3, r1
 8002722:	4995      	ldr	r1, [pc, #596]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002728:	e0f5      	b.n	8002916 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8085 	beq.w	8002840 <HAL_RCC_OscConfig+0x504>
 8002736:	2301      	movs	r3, #1
 8002738:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002748:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002756:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	461a      	mov	r2, r3
 800275e:	2301      	movs	r3, #1
 8002760:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7ff f927 	bl	80019b4 <HAL_GetTick>
 8002766:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276a:	e00a      	b.n	8002782 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276c:	f7ff f922 	bl	80019b4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d902      	bls.n	8002782 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	f000 bceb 	b.w	8003158 <HAL_RCC_OscConfig+0xe1c>
 8002782:	2302      	movs	r3, #2
 8002784:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002794:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	fab3 f383 	clz	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d102      	bne.n	80027b2 <HAL_RCC_OscConfig+0x476>
 80027ac:	4b72      	ldr	r3, [pc, #456]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	e013      	b.n	80027da <HAL_RCC_OscConfig+0x49e>
 80027b2:	2302      	movs	r3, #2
 80027b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80027c4:	2302      	movs	r3, #2
 80027c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027d6:	4b68      	ldr	r3, [pc, #416]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2202      	movs	r2, #2
 80027dc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80027e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80027e4:	fa92 f2a2 	rbit	r2, r2
 80027e8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80027ec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80027f0:	fab2 f282 	clz	r2, r2
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f042 0220 	orr.w	r2, r2, #32
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	f002 021f 	and.w	r2, r2, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f202 	lsl.w	r2, r1, r2
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0af      	beq.n	800276c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b5a      	ldr	r3, [pc, #360]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002814:	1d3b      	adds	r3, r7, #4
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	21f8      	movs	r1, #248	; 0xf8
 800281c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002824:	fa91 f1a1 	rbit	r1, r1
 8002828:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800282c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002830:	fab1 f181 	clz	r1, r1
 8002834:	b2c9      	uxtb	r1, r1
 8002836:	408b      	lsls	r3, r1
 8002838:	494f      	ldr	r1, [pc, #316]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
 800283e:	e06a      	b.n	8002916 <HAL_RCC_OscConfig+0x5da>
 8002840:	2301      	movs	r3, #1
 8002842:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002852:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002860:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	461a      	mov	r2, r3
 8002868:	2300      	movs	r3, #0
 800286a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff f8a2 	bl	80019b4 <HAL_GetTick>
 8002870:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002876:	f7ff f89d 	bl	80019b4 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d902      	bls.n	800288c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	f000 bc66 	b.w	8003158 <HAL_RCC_OscConfig+0xe1c>
 800288c:	2302      	movs	r3, #2
 800288e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800289e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_OscConfig+0x580>
 80028b6:	4b30      	ldr	r3, [pc, #192]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e013      	b.n	80028e4 <HAL_RCC_OscConfig+0x5a8>
 80028bc:	2302      	movs	r3, #2
 80028be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80028ce:	2302      	movs	r3, #2
 80028d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80028d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <HAL_RCC_OscConfig+0x63c>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2202      	movs	r2, #2
 80028e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80028ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80028ee:	fa92 f2a2 	rbit	r2, r2
 80028f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80028f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028fa:	fab2 f282 	clz	r2, r2
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	f042 0220 	orr.w	r2, r2, #32
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	f002 021f 	and.w	r2, r2, #31
 800290a:	2101      	movs	r1, #1
 800290c:	fa01 f202 	lsl.w	r2, r1, r2
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1af      	bne.n	8002876 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80da 	beq.w	8002ada <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d069      	beq.n	8002a04 <HAL_RCC_OscConfig+0x6c8>
 8002930:	2301      	movs	r3, #1
 8002932:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002942:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_OscConfig+0x640>)
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	461a      	mov	r2, r3
 8002956:	2301      	movs	r3, #1
 8002958:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7ff f82b 	bl	80019b4 <HAL_GetTick>
 800295e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002962:	e00d      	b.n	8002980 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002964:	f7ff f826 	bl	80019b4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d905      	bls.n	8002980 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e3ef      	b.n	8003158 <HAL_RCC_OscConfig+0xe1c>
 8002978:	40021000 	.word	0x40021000
 800297c:	10908120 	.word	0x10908120
 8002980:	2302      	movs	r3, #2
 8002982:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002998:	2202      	movs	r2, #2
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	fa93 f2a3 	rbit	r2, r3
 80029a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80029b0:	2202      	movs	r2, #2
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80029c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c4:	4ba4      	ldr	r3, [pc, #656]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 80029c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029cc:	2102      	movs	r1, #2
 80029ce:	6019      	str	r1, [r3, #0]
 80029d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f1a3 	rbit	r1, r3
 80029da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029de:	6019      	str	r1, [r3, #0]
  return result;
 80029e0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2101      	movs	r1, #1
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0b0      	beq.n	8002964 <HAL_RCC_OscConfig+0x628>
 8002a02:	e06a      	b.n	8002ada <HAL_RCC_OscConfig+0x79e>
 8002a04:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	fa93 f2a3 	rbit	r2, r3
 8002a16:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a1a:	601a      	str	r2, [r3, #0]
  return result;
 8002a1c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a20:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b8c      	ldr	r3, [pc, #560]	; (8002c5c <HAL_RCC_OscConfig+0x920>)
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	461a      	mov	r2, r3
 8002a32:	2300      	movs	r3, #0
 8002a34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a36:	f7fe ffbd 	bl	80019b4 <HAL_GetTick>
 8002a3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3e:	e009      	b.n	8002a54 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a40:	f7fe ffb8 	bl	80019b4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e381      	b.n	8003158 <HAL_RCC_OscConfig+0xe1c>
 8002a54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a58:	2202      	movs	r2, #2
 8002a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	fa93 f2a3 	rbit	r2, r3
 8002a66:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a70:	2202      	movs	r2, #2
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	fa93 f2a3 	rbit	r2, r3
 8002a7e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a88:	2202      	movs	r2, #2
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	fa93 f2a3 	rbit	r2, r3
 8002a96:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9c:	4b6e      	ldr	r3, [pc, #440]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	6019      	str	r1, [r3, #0]
 8002aa8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fa93 f1a3 	rbit	r1, r3
 8002ab2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ab6:	6019      	str	r1, [r3, #0]
  return result;
 8002ab8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1b2      	bne.n	8002a40 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8157 	beq.w	8002d98 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af0:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d112      	bne.n	8002b22 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afc:	4b56      	ldr	r3, [pc, #344]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	4a55      	ldr	r2, [pc, #340]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b06:	61d3      	str	r3, [r2, #28]
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	f107 030c 	add.w	r3, r7, #12
 8002b1a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b4f      	ldr	r3, [pc, #316]	; (8002c60 <HAL_RCC_OscConfig+0x924>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11a      	bne.n	8002b64 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2e:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_RCC_OscConfig+0x924>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a4b      	ldr	r2, [pc, #300]	; (8002c60 <HAL_RCC_OscConfig+0x924>)
 8002b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3a:	f7fe ff3b 	bl	80019b4 <HAL_GetTick>
 8002b3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	e009      	b.n	8002b58 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b44:	f7fe ff36 	bl	80019b4 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b64      	cmp	r3, #100	; 0x64
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e2ff      	b.n	8003158 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b58:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_RCC_OscConfig+0x924>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ef      	beq.n	8002b44 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d106      	bne.n	8002b7c <HAL_RCC_OscConfig+0x840>
 8002b6e:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a39      	ldr	r2, [pc, #228]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6213      	str	r3, [r2, #32]
 8002b7a:	e02f      	b.n	8002bdc <HAL_RCC_OscConfig+0x8a0>
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x864>
 8002b86:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4a33      	ldr	r2, [pc, #204]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6213      	str	r3, [r2, #32]
 8002b92:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a30      	ldr	r2, [pc, #192]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002b98:	f023 0304 	bic.w	r3, r3, #4
 8002b9c:	6213      	str	r3, [r2, #32]
 8002b9e:	e01d      	b.n	8002bdc <HAL_RCC_OscConfig+0x8a0>
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x888>
 8002baa:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a2a      	ldr	r2, [pc, #168]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6213      	str	r3, [r2, #32]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0x8a0>
 8002bc4:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	4a23      	ldr	r2, [pc, #140]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6213      	str	r3, [r2, #32]
 8002bd0:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a20      	ldr	r2, [pc, #128]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002bd6:	f023 0304 	bic.w	r3, r3, #4
 8002bda:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d06a      	beq.n	8002cbc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fee5 	bl	80019b4 <HAL_GetTick>
 8002bea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf0:	f7fe fee0 	bl	80019b4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e2a7      	b.n	8003158 <HAL_RCC_OscConfig+0xe1c>
 8002c08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f2a3 	rbit	r2, r3
 8002c1a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c24:	2202      	movs	r2, #2
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	fa93 f2a3 	rbit	r2, r3
 8002c32:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c36:	601a      	str	r2, [r3, #0]
  return result;
 8002c38:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d108      	bne.n	8002c64 <HAL_RCC_OscConfig+0x928>
 8002c52:	4b01      	ldr	r3, [pc, #4]	; (8002c58 <HAL_RCC_OscConfig+0x91c>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	e013      	b.n	8002c80 <HAL_RCC_OscConfig+0x944>
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	10908120 	.word	0x10908120
 8002c60:	40007000 	.word	0x40007000
 8002c64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c68:	2202      	movs	r2, #2
 8002c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fa93 f2a3 	rbit	r2, r3
 8002c76:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	4bc0      	ldr	r3, [pc, #768]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002c84:	2102      	movs	r1, #2
 8002c86:	6011      	str	r1, [r2, #0]
 8002c88:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	fa92 f1a2 	rbit	r1, r2
 8002c92:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c96:	6011      	str	r1, [r2, #0]
  return result;
 8002c98:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	fab2 f282 	clz	r2, r2
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f002 021f 	and.w	r2, r2, #31
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d09a      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x8b4>
 8002cba:	e063      	b.n	8002d84 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fe7a 	bl	80019b4 <HAL_GetTick>
 8002cc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	e00b      	b.n	8002cde <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe fe75 	bl	80019b4 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e23c      	b.n	8003158 <HAL_RCC_OscConfig+0xe1c>
 8002cde:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	fa93 f2a3 	rbit	r2, r3
 8002cf0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	fa93 f2a3 	rbit	r2, r3
 8002d08:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d0c:	601a      	str	r2, [r3, #0]
  return result;
 8002d0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d102      	bne.n	8002d2e <HAL_RCC_OscConfig+0x9f2>
 8002d28:	4b95      	ldr	r3, [pc, #596]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	e00d      	b.n	8002d4a <HAL_RCC_OscConfig+0xa0e>
 8002d2e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d32:	2202      	movs	r2, #2
 8002d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	fa93 f2a3 	rbit	r2, r3
 8002d40:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	4b8e      	ldr	r3, [pc, #568]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d4e:	2102      	movs	r1, #2
 8002d50:	6011      	str	r1, [r2, #0]
 8002d52:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	fa92 f1a2 	rbit	r1, r2
 8002d5c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d60:	6011      	str	r1, [r2, #0]
  return result;
 8002d62:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	fab2 f282 	clz	r2, r2
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	f002 021f 	and.w	r2, r2, #31
 8002d78:	2101      	movs	r1, #1
 8002d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1a0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d84:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d105      	bne.n	8002d98 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8c:	4b7c      	ldr	r3, [pc, #496]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	4a7b      	ldr	r2, [pc, #492]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 81d9 	beq.w	8003156 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da4:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 030c 	and.w	r3, r3, #12
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	f000 81a6 	beq.w	80030fe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	f040 811e 	bne.w	8002ffa <HAL_RCC_OscConfig+0xcbe>
 8002dbe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002dc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	fa93 f2a3 	rbit	r2, r3
 8002dd2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002dd6:	601a      	str	r2, [r3, #0]
  return result;
 8002dd8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ddc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002de8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	461a      	mov	r2, r3
 8002df0:	2300      	movs	r3, #0
 8002df2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe fdde 	bl	80019b4 <HAL_GetTick>
 8002df8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfc:	e009      	b.n	8002e12 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fdd9 	bl	80019b4 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e1a2      	b.n	8003158 <HAL_RCC_OscConfig+0xe1c>
 8002e12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	fa93 f2a3 	rbit	r2, r3
 8002e26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e2a:	601a      	str	r2, [r3, #0]
  return result;
 8002e2c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d102      	bne.n	8002e4c <HAL_RCC_OscConfig+0xb10>
 8002e46:	4b4e      	ldr	r3, [pc, #312]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	e01b      	b.n	8002e84 <HAL_RCC_OscConfig+0xb48>
 8002e4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	fa93 f2a3 	rbit	r2, r3
 8002e60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	fa93 f2a3 	rbit	r2, r3
 8002e7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e8c:	6011      	str	r1, [r2, #0]
 8002e8e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	fa92 f1a2 	rbit	r1, r2
 8002e98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e9c:	6011      	str	r1, [r2, #0]
  return result;
 8002e9e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	fab2 f282 	clz	r2, r2
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	f042 0220 	orr.w	r2, r2, #32
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f002 021f 	and.w	r2, r2, #31
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d19e      	bne.n	8002dfe <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec0:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	f023 020f 	bic.w	r2, r3, #15
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	492c      	ldr	r1, [pc, #176]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002ed4:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6a19      	ldr	r1, [r3, #32]
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	4925      	ldr	r1, [pc, #148]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
 8002ef0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	fa93 f2a3 	rbit	r2, r3
 8002f04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f08:	601a      	str	r2, [r3, #0]
  return result;
 8002f0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f0e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	461a      	mov	r2, r3
 8002f22:	2301      	movs	r3, #1
 8002f24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fe fd45 	bl	80019b4 <HAL_GetTick>
 8002f2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f2e:	e009      	b.n	8002f44 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe fd40 	bl	80019b4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e109      	b.n	8003158 <HAL_RCC_OscConfig+0xe1c>
 8002f44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	fa93 f2a3 	rbit	r2, r3
 8002f58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f5c:	601a      	str	r2, [r3, #0]
  return result;
 8002f5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d105      	bne.n	8002f84 <HAL_RCC_OscConfig+0xc48>
 8002f78:	4b01      	ldr	r3, [pc, #4]	; (8002f80 <HAL_RCC_OscConfig+0xc44>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	e01e      	b.n	8002fbc <HAL_RCC_OscConfig+0xc80>
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	fa93 f2a3 	rbit	r2, r3
 8002fb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0xe28>)
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002fc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fc4:	6011      	str	r1, [r2, #0]
 8002fc6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	fa92 f1a2 	rbit	r1, r2
 8002fd0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fd4:	6011      	str	r1, [r2, #0]
  return result;
 8002fd6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	fab2 f282 	clz	r2, r2
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	f042 0220 	orr.w	r2, r2, #32
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	f002 021f 	and.w	r2, r2, #31
 8002fec:	2101      	movs	r1, #1
 8002fee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d09b      	beq.n	8002f30 <HAL_RCC_OscConfig+0xbf4>
 8002ff8:	e0ad      	b.n	8003156 <HAL_RCC_OscConfig+0xe1a>
 8002ffa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ffe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	fa93 f2a3 	rbit	r2, r3
 800300e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003012:	601a      	str	r2, [r3, #0]
  return result;
 8003014:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003018:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003024:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	461a      	mov	r2, r3
 800302c:	2300      	movs	r3, #0
 800302e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fe fcc0 	bl	80019b4 <HAL_GetTick>
 8003034:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003038:	e009      	b.n	800304e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303a:	f7fe fcbb 	bl	80019b4 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e084      	b.n	8003158 <HAL_RCC_OscConfig+0xe1c>
 800304e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	fa93 f2a3 	rbit	r2, r3
 8003062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003066:	601a      	str	r2, [r3, #0]
  return result;
 8003068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800306c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d102      	bne.n	8003088 <HAL_RCC_OscConfig+0xd4c>
 8003082:	4b38      	ldr	r3, [pc, #224]	; (8003164 <HAL_RCC_OscConfig+0xe28>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	e01b      	b.n	80030c0 <HAL_RCC_OscConfig+0xd84>
 8003088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	fa93 f2a3 	rbit	r2, r3
 800309c:	f107 0320 	add.w	r3, r7, #32
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f107 031c 	add.w	r3, r7, #28
 80030a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f107 031c 	add.w	r3, r7, #28
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	fa93 f2a3 	rbit	r2, r3
 80030b6:	f107 0318 	add.w	r3, r7, #24
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	4b29      	ldr	r3, [pc, #164]	; (8003164 <HAL_RCC_OscConfig+0xe28>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	f107 0214 	add.w	r2, r7, #20
 80030c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030c8:	6011      	str	r1, [r2, #0]
 80030ca:	f107 0214 	add.w	r2, r7, #20
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	fa92 f1a2 	rbit	r1, r2
 80030d4:	f107 0210 	add.w	r2, r7, #16
 80030d8:	6011      	str	r1, [r2, #0]
  return result;
 80030da:	f107 0210 	add.w	r2, r7, #16
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	fab2 f282 	clz	r2, r2
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f042 0220 	orr.w	r2, r2, #32
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	f002 021f 	and.w	r2, r2, #31
 80030f0:	2101      	movs	r1, #1
 80030f2:	fa01 f202 	lsl.w	r2, r1, r2
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d19e      	bne.n	800303a <HAL_RCC_OscConfig+0xcfe>
 80030fc:	e02b      	b.n	8003156 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e025      	b.n	8003158 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800310c:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_RCC_OscConfig+0xe28>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_RCC_OscConfig+0xe28>)
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800311c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003120:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	429a      	cmp	r2, r3
 800312c:	d111      	bne.n	8003152 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800312e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003132:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800313c:	429a      	cmp	r2, r3
 800313e:	d108      	bne.n	8003152 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003144:	f003 020f 	and.w	r2, r3, #15
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800314e:	429a      	cmp	r2, r3
 8003150:	d001      	beq.n	8003156 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000

08003168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b09e      	sub	sp, #120	; 0x78
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e162      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003180:	4b90      	ldr	r3, [pc, #576]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d910      	bls.n	80031b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b8d      	ldr	r3, [pc, #564]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 0207 	bic.w	r2, r3, #7
 8003196:	498b      	ldr	r1, [pc, #556]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	4b89      	ldr	r3, [pc, #548]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e14a      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031bc:	4b82      	ldr	r3, [pc, #520]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	497f      	ldr	r1, [pc, #508]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 80dc 	beq.w	8003394 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d13c      	bne.n	800325e <HAL_RCC_ClockConfig+0xf6>
 80031e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d102      	bne.n	800320e <HAL_RCC_ClockConfig+0xa6>
 8003208:	4b6f      	ldr	r3, [pc, #444]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	e00f      	b.n	800322e <HAL_RCC_ClockConfig+0xc6>
 800320e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003212:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	667b      	str	r3, [r7, #100]	; 0x64
 800321c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003220:	663b      	str	r3, [r7, #96]	; 0x60
 8003222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800322a:	4b67      	ldr	r3, [pc, #412]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003232:	65ba      	str	r2, [r7, #88]	; 0x58
 8003234:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003236:	fa92 f2a2 	rbit	r2, r2
 800323a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800323c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800323e:	fab2 f282 	clz	r2, r2
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	f042 0220 	orr.w	r2, r2, #32
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	f002 021f 	and.w	r2, r2, #31
 800324e:	2101      	movs	r1, #1
 8003250:	fa01 f202 	lsl.w	r2, r1, r2
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d17b      	bne.n	8003352 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0f3      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d13c      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x178>
 8003266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d102      	bne.n	8003290 <HAL_RCC_ClockConfig+0x128>
 800328a:	4b4f      	ldr	r3, [pc, #316]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	e00f      	b.n	80032b0 <HAL_RCC_ClockConfig+0x148>
 8003290:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003294:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003298:	fa93 f3a3 	rbit	r3, r3
 800329c:	647b      	str	r3, [r7, #68]	; 0x44
 800329e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032a2:	643b      	str	r3, [r7, #64]	; 0x40
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ac:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80032b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b8:	fa92 f2a2 	rbit	r2, r2
 80032bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c0:	fab2 f282 	clz	r2, r2
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	f042 0220 	orr.w	r2, r2, #32
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	f002 021f 	and.w	r2, r2, #31
 80032d0:	2101      	movs	r1, #1
 80032d2:	fa01 f202 	lsl.w	r2, r1, r2
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d13a      	bne.n	8003352 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0b2      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
 80032e0:	2302      	movs	r3, #2
 80032e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <HAL_RCC_ClockConfig+0x1a0>
 8003302:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	e00d      	b.n	8003324 <HAL_RCC_ClockConfig+0x1bc>
 8003308:	2302      	movs	r3, #2
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
 8003314:	2302      	movs	r3, #2
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2202      	movs	r2, #2
 8003326:	61ba      	str	r2, [r7, #24]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	fa92 f2a2 	rbit	r2, r2
 800332e:	617a      	str	r2, [r7, #20]
  return result;
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	fab2 f282 	clz	r2, r2
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	f042 0220 	orr.w	r2, r2, #32
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f002 021f 	and.w	r2, r2, #31
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e079      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003352:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f023 0203 	bic.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	491a      	ldr	r1, [pc, #104]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003364:	f7fe fb26 	bl	80019b4 <HAL_GetTick>
 8003368:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	e00a      	b.n	8003382 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336c:	f7fe fb22 	bl	80019b4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e061      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 020c 	and.w	r2, r3, #12
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	429a      	cmp	r2, r3
 8003392:	d1eb      	bne.n	800336c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d214      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 0207 	bic.w	r2, r3, #7
 80033aa:	4906      	ldr	r1, [pc, #24]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e040      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
 80033c4:	40022000 	.word	0x40022000
 80033c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_RCC_ClockConfig+0x2e8>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	491a      	ldr	r1, [pc, #104]	; (8003450 <HAL_RCC_ClockConfig+0x2e8>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <HAL_RCC_ClockConfig+0x2e8>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4912      	ldr	r1, [pc, #72]	; (8003450 <HAL_RCC_ClockConfig+0x2e8>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800340a:	f000 f829 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800340e:	4601      	mov	r1, r0
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <HAL_RCC_ClockConfig+0x2e8>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003418:	22f0      	movs	r2, #240	; 0xf0
 800341a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	fa92 f2a2 	rbit	r2, r2
 8003422:	60fa      	str	r2, [r7, #12]
  return result;
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	fab2 f282 	clz	r2, r2
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	40d3      	lsrs	r3, r2
 800342e:	4a09      	ldr	r2, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x2ec>)
 8003430:	5cd3      	ldrb	r3, [r2, r3]
 8003432:	fa21 f303 	lsr.w	r3, r1, r3
 8003436:	4a08      	ldr	r2, [pc, #32]	; (8003458 <HAL_RCC_ClockConfig+0x2f0>)
 8003438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_RCC_ClockConfig+0x2f4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fa74 	bl	800192c <HAL_InitTick>
  
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3778      	adds	r7, #120	; 0x78
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	08006684 	.word	0x08006684
 8003458:	2000000c 	.word	0x2000000c
 800345c:	20000010 	.word	0x20000010

08003460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	b480      	push	{r7}
 8003462:	b08b      	sub	sp, #44	; 0x2c
 8003464:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800347a:	4b2a      	ldr	r3, [pc, #168]	; (8003524 <HAL_RCC_GetSysClockFreq+0xc4>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b04      	cmp	r3, #4
 8003488:	d002      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x30>
 800348a:	2b08      	cmp	r3, #8
 800348c:	d003      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x36>
 800348e:	e03f      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003490:	4b25      	ldr	r3, [pc, #148]	; (8003528 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003492:	623b      	str	r3, [r7, #32]
      break;
 8003494:	e03f      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800349c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	fa92 f2a2 	rbit	r2, r2
 80034a8:	607a      	str	r2, [r7, #4]
  return result;
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	40d3      	lsrs	r3, r2
 80034b4:	4a1d      	ldr	r2, [pc, #116]	; (800352c <HAL_RCC_GetSysClockFreq+0xcc>)
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	220f      	movs	r2, #15
 80034c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	fa92 f2a2 	rbit	r2, r2
 80034cc:	60fa      	str	r2, [r7, #12]
  return result;
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	fab2 f282 	clz	r2, r2
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	40d3      	lsrs	r3, r2
 80034d8:	4a15      	ldr	r2, [pc, #84]	; (8003530 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034e8:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	e007      	b.n	800350a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034fa:	4a0b      	ldr	r2, [pc, #44]	; (8003528 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	623b      	str	r3, [r7, #32]
      break;
 800350e:	e002      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003512:	623b      	str	r3, [r7, #32]
      break;
 8003514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003516:	6a3b      	ldr	r3, [r7, #32]
}
 8003518:	4618      	mov	r0, r3
 800351a:	372c      	adds	r7, #44	; 0x2c
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40021000 	.word	0x40021000
 8003528:	007a1200 	.word	0x007a1200
 800352c:	0800669c 	.word	0x0800669c
 8003530:	080066ac 	.word	0x080066ac

08003534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <HAL_RCC_GetHCLKFreq+0x14>)
 800353a:	681b      	ldr	r3, [r3, #0]
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	2000000c 	.word	0x2000000c

0800354c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003552:	f7ff ffef 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 8003556:	4601      	mov	r1, r0
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003560:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003564:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	fa92 f2a2 	rbit	r2, r2
 800356c:	603a      	str	r2, [r7, #0]
  return result;
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	fab2 f282 	clz	r2, r2
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	40d3      	lsrs	r3, r2
 8003578:	4a04      	ldr	r2, [pc, #16]	; (800358c <HAL_RCC_GetPCLK1Freq+0x40>)
 800357a:	5cd3      	ldrb	r3, [r2, r3]
 800357c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000
 800358c:	08006694 	.word	0x08006694

08003590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003596:	f7ff ffcd 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 800359a:	4601      	mov	r1, r0
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80035a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80035a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	fa92 f2a2 	rbit	r2, r2
 80035b0:	603a      	str	r2, [r7, #0]
  return result;
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	fab2 f282 	clz	r2, r2
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	40d3      	lsrs	r3, r2
 80035bc:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80035be:	5cd3      	ldrb	r3, [r2, r3]
 80035c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	08006694 	.word	0x08006694

080035d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b092      	sub	sp, #72	; 0x48
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80d7 	beq.w	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f8:	4b4e      	ldr	r3, [pc, #312]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10e      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003604:	4b4b      	ldr	r3, [pc, #300]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4a4a      	ldr	r2, [pc, #296]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360e:	61d3      	str	r3, [r2, #28]
 8003610:	4b48      	ldr	r3, [pc, #288]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	4b45      	ldr	r3, [pc, #276]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d118      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362e:	4b42      	ldr	r3, [pc, #264]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a41      	ldr	r2, [pc, #260]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003638:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363a:	f7fe f9bb 	bl	80019b4 <HAL_GetTick>
 800363e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fe f9b7 	bl	80019b4 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b64      	cmp	r3, #100	; 0x64
 800364e:	d901      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e1d6      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b38      	ldr	r3, [pc, #224]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003660:	4b34      	ldr	r3, [pc, #208]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003668:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800366a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8084 	beq.w	800377a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800367c:	429a      	cmp	r2, r3
 800367e:	d07c      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003680:	4b2c      	ldr	r3, [pc, #176]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800368e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800369a:	fab3 f383 	clz	r3, r3
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	461a      	mov	r2, r3
 80036aa:	2301      	movs	r3, #1
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	461a      	mov	r2, r3
 80036ce:	2300      	movs	r3, #0
 80036d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036d2:	4a18      	ldr	r2, [pc, #96]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d04b      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e2:	f7fe f967 	bl	80019b4 <HAL_GetTick>
 80036e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fe f963 	bl	80019b4 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e180      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003700:	2302      	movs	r3, #2
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
 800370c:	2302      	movs	r3, #2
 800370e:	623b      	str	r3, [r7, #32]
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	61fb      	str	r3, [r7, #28]
  return result;
 8003718:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d108      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800372e:	4b01      	ldr	r3, [pc, #4]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	e00d      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003734:	40021000 	.word	0x40021000
 8003738:	40007000 	.word	0x40007000
 800373c:	10908100 	.word	0x10908100
 8003740:	2302      	movs	r3, #2
 8003742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	4ba0      	ldr	r3, [pc, #640]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2202      	movs	r2, #2
 8003752:	613a      	str	r2, [r7, #16]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	fa92 f2a2 	rbit	r2, r2
 800375a:	60fa      	str	r2, [r7, #12]
  return result;
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	fab2 f282 	clz	r2, r2
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	f002 021f 	and.w	r2, r2, #31
 800376e:	2101      	movs	r1, #1
 8003770:	fa01 f202 	lsl.w	r2, r1, r2
 8003774:	4013      	ands	r3, r2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0b7      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800377a:	4b95      	ldr	r3, [pc, #596]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4992      	ldr	r1, [pc, #584]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003788:	4313      	orrs	r3, r2
 800378a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800378c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003790:	2b01      	cmp	r3, #1
 8003792:	d105      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003794:	4b8e      	ldr	r3, [pc, #568]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	4a8d      	ldr	r2, [pc, #564]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800379a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ac:	4b88      	ldr	r3, [pc, #544]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	f023 0203 	bic.w	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4985      	ldr	r1, [pc, #532]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037ca:	4b81      	ldr	r3, [pc, #516]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	497e      	ldr	r1, [pc, #504]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037e8:	4b79      	ldr	r3, [pc, #484]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	4976      	ldr	r1, [pc, #472]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003806:	4b72      	ldr	r3, [pc, #456]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	f023 0210 	bic.w	r2, r3, #16
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	496f      	ldr	r1, [pc, #444]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003814:	4313      	orrs	r3, r2
 8003816:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003824:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003830:	4967      	ldr	r1, [pc, #412]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003842:	4b63      	ldr	r3, [pc, #396]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f023 0220 	bic.w	r2, r3, #32
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4960      	ldr	r1, [pc, #384]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003850:	4313      	orrs	r3, r2
 8003852:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003860:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	4958      	ldr	r1, [pc, #352]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800387e:	4b54      	ldr	r3, [pc, #336]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	4951      	ldr	r1, [pc, #324]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800388c:	4313      	orrs	r3, r2
 800388e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800389c:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	4949      	ldr	r1, [pc, #292]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038ba:	4b45      	ldr	r3, [pc, #276]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	4942      	ldr	r1, [pc, #264]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038d8:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	493a      	ldr	r1, [pc, #232]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	4933      	ldr	r1, [pc, #204]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003904:	4313      	orrs	r3, r2
 8003906:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003914:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003920:	492b      	ldr	r1, [pc, #172]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003922:	4313      	orrs	r3, r2
 8003924:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003932:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	4924      	ldr	r1, [pc, #144]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003950:	4b1f      	ldr	r3, [pc, #124]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	491c      	ldr	r1, [pc, #112]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397a:	4915      	ldr	r1, [pc, #84]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800397c:	4313      	orrs	r3, r2
 800397e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003998:	490d      	ldr	r1, [pc, #52]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b6:	4906      	ldr	r1, [pc, #24]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00c      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039c8:	4b01      	ldr	r3, [pc, #4]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	e002      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039dc:	490b      	ldr	r1, [pc, #44]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fa:	4904      	ldr	r1, [pc, #16]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3748      	adds	r7, #72	; 0x48
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000

08003a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e01d      	b.n	8003a5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd fcda 	bl	80013f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f000 fc64 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e01d      	b.n	8003ab4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d106      	bne.n	8003a92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f815 	bl	8003abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f000 fc39 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 ffbe 	bl	8004a64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a21      	ldr	r2, [pc, #132]	; (8003b74 <HAL_TIM_PWM_Start+0xa4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d018      	beq.n	8003b24 <HAL_TIM_PWM_Start+0x54>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a20      	ldr	r2, [pc, #128]	; (8003b78 <HAL_TIM_PWM_Start+0xa8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d013      	beq.n	8003b24 <HAL_TIM_PWM_Start+0x54>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1e      	ldr	r2, [pc, #120]	; (8003b7c <HAL_TIM_PWM_Start+0xac>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00e      	beq.n	8003b24 <HAL_TIM_PWM_Start+0x54>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <HAL_TIM_PWM_Start+0xb0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d009      	beq.n	8003b24 <HAL_TIM_PWM_Start+0x54>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <HAL_TIM_PWM_Start+0xb4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d004      	beq.n	8003b24 <HAL_TIM_PWM_Start+0x54>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <HAL_TIM_PWM_Start+0xb8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d101      	bne.n	8003b28 <HAL_TIM_PWM_Start+0x58>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_TIM_PWM_Start+0x5a>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <HAL_TIM_PWM_Start+0xbc>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b06      	cmp	r3, #6
 8003b4e:	d00b      	beq.n	8003b68 <HAL_TIM_PWM_Start+0x98>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b56:	d007      	beq.n	8003b68 <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40013400 	.word	0x40013400
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800
 8003b88:	40015000 	.word	0x40015000
 8003b8c:	00010007 	.word	0x00010007

08003b90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	6839      	ldr	r1, [r7, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 ff5e 	bl	8004a64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2c      	ldr	r2, [pc, #176]	; (8003c60 <HAL_TIM_PWM_Stop+0xd0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d018      	beq.n	8003be4 <HAL_TIM_PWM_Stop+0x54>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2b      	ldr	r2, [pc, #172]	; (8003c64 <HAL_TIM_PWM_Stop+0xd4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d013      	beq.n	8003be4 <HAL_TIM_PWM_Stop+0x54>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <HAL_TIM_PWM_Stop+0xd8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00e      	beq.n	8003be4 <HAL_TIM_PWM_Stop+0x54>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <HAL_TIM_PWM_Stop+0xdc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d009      	beq.n	8003be4 <HAL_TIM_PWM_Stop+0x54>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <HAL_TIM_PWM_Stop+0xe0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_TIM_PWM_Stop+0x54>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <HAL_TIM_PWM_Stop+0xe4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d101      	bne.n	8003be8 <HAL_TIM_PWM_Stop+0x58>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <HAL_TIM_PWM_Stop+0x5a>
 8003be8:	2300      	movs	r3, #0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d017      	beq.n	8003c1e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10f      	bne.n	8003c1e <HAL_TIM_PWM_Stop+0x8e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	f240 4344 	movw	r3, #1092	; 0x444
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d107      	bne.n	8003c1e <HAL_TIM_PWM_Stop+0x8e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <HAL_TIM_PWM_Stop+0xbe>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a1a      	ldr	r2, [r3, #32]
 8003c34:	f240 4344 	movw	r3, #1092	; 0x444
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d107      	bne.n	8003c4e <HAL_TIM_PWM_Stop+0xbe>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40013400 	.word	0x40013400
 8003c68:	40014000 	.word	0x40014000
 8003c6c:	40014400 	.word	0x40014400
 8003c70:	40014800 	.word	0x40014800
 8003c74:	40015000 	.word	0x40015000

08003c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e105      	b.n	8003e9e <HAL_TIM_PWM_ConfigChannel+0x226>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b14      	cmp	r3, #20
 8003ca6:	f200 80f0 	bhi.w	8003e8a <HAL_TIM_PWM_ConfigChannel+0x212>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003d05 	.word	0x08003d05
 8003cb4:	08003e8b 	.word	0x08003e8b
 8003cb8:	08003e8b 	.word	0x08003e8b
 8003cbc:	08003e8b 	.word	0x08003e8b
 8003cc0:	08003d45 	.word	0x08003d45
 8003cc4:	08003e8b 	.word	0x08003e8b
 8003cc8:	08003e8b 	.word	0x08003e8b
 8003ccc:	08003e8b 	.word	0x08003e8b
 8003cd0:	08003d87 	.word	0x08003d87
 8003cd4:	08003e8b 	.word	0x08003e8b
 8003cd8:	08003e8b 	.word	0x08003e8b
 8003cdc:	08003e8b 	.word	0x08003e8b
 8003ce0:	08003dc7 	.word	0x08003dc7
 8003ce4:	08003e8b 	.word	0x08003e8b
 8003ce8:	08003e8b 	.word	0x08003e8b
 8003cec:	08003e8b 	.word	0x08003e8b
 8003cf0:	08003e09 	.word	0x08003e09
 8003cf4:	08003e8b 	.word	0x08003e8b
 8003cf8:	08003e8b 	.word	0x08003e8b
 8003cfc:	08003e8b 	.word	0x08003e8b
 8003d00:	08003e49 	.word	0x08003e49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fba4 	bl	8004458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0208 	orr.w	r2, r2, #8
 8003d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0204 	bic.w	r2, r2, #4
 8003d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6999      	ldr	r1, [r3, #24]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	619a      	str	r2, [r3, #24]
      break;
 8003d42:	e0a3      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fc1e 	bl	800458c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6999      	ldr	r1, [r3, #24]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	021a      	lsls	r2, r3, #8
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	619a      	str	r2, [r3, #24]
      break;
 8003d84:	e082      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fc91 	bl	80046b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0208 	orr.w	r2, r2, #8
 8003da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0204 	bic.w	r2, r2, #4
 8003db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69d9      	ldr	r1, [r3, #28]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	61da      	str	r2, [r3, #28]
      break;
 8003dc4:	e062      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fd03 	bl	80047d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69d9      	ldr	r1, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	021a      	lsls	r2, r3, #8
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	61da      	str	r2, [r3, #28]
      break;
 8003e06:	e041      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fd52 	bl	80048b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0208 	orr.w	r2, r2, #8
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0204 	bic.w	r2, r2, #4
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e46:	e021      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fd9c 	bl	800498c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	021a      	lsls	r2, r3, #8
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e88:	e000      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003e8a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop

08003ea8 <HAL_TIM_DMABurst_MultiWriteStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiWriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                   uint32_t BurstRequestSrc, uint32_t *BurstBuffer,
                                                   uint32_t  BurstLength,  uint32_t  DataLength)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d101      	bne.n	8003ec6 <HAL_TIM_DMABurst_MultiWriteStart+0x1e>
  {
    return HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e10d      	b.n	80040e2 <HAL_TIM_DMABurst_MultiWriteStart+0x23a>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d10b      	bne.n	8003eea <HAL_TIM_DMABurst_MultiWriteStart+0x42>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <HAL_TIM_DMABurst_MultiWriteStart+0x3a>
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_TIM_DMABurst_MultiWriteStart+0x3a>
    {
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0ff      	b.n	80040e2 <HAL_TIM_DMABurst_MultiWriteStart+0x23a>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  else
  {
    /* nothing to do */
  }
  switch (BurstRequestSrc)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef0:	d06b      	beq.n	8003fca <HAL_TIM_DMABurst_MultiWriteStart+0x122>
 8003ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef6:	d809      	bhi.n	8003f0c <HAL_TIM_DMABurst_MultiWriteStart+0x64>
 8003ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efc:	d02e      	beq.n	8003f5c <HAL_TIM_DMABurst_MultiWriteStart+0xb4>
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f02:	d047      	beq.n	8003f94 <HAL_TIM_DMABurst_MultiWriteStart+0xec>
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f08:	d00c      	beq.n	8003f24 <HAL_TIM_DMABurst_MultiWriteStart+0x7c>
        return HAL_ERROR;
      }
      break;
    }
    default:
      break;
 8003f0a:	e0d7      	b.n	80040bc <HAL_TIM_DMABurst_MultiWriteStart+0x214>
  switch (BurstRequestSrc)
 8003f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f10:	f000 8091 	beq.w	8004036 <HAL_TIM_DMABurst_MultiWriteStart+0x18e>
 8003f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f18:	f000 80a8 	beq.w	800406c <HAL_TIM_DMABurst_MultiWriteStart+0x1c4>
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f20:	d06e      	beq.n	8004000 <HAL_TIM_DMABurst_MultiWriteStart+0x158>
      break;
 8003f22:	e0cb      	b.n	80040bc <HAL_TIM_DMABurst_MultiWriteStart+0x214>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	4a70      	ldr	r2, [pc, #448]	; (80040ec <HAL_TIM_DMABurst_MultiWriteStart+0x244>)
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4a6f      	ldr	r2, [pc, #444]	; (80040f0 <HAL_TIM_DMABurst_MultiWriteStart+0x248>)
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	4a6e      	ldr	r2, [pc, #440]	; (80040f4 <HAL_TIM_DMABurst_MultiWriteStart+0x24c>)
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a18      	ldr	r0, [r3, #32]
 8003f40:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 8003f48:	461a      	mov	r2, r3
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f7fd feb8 	bl	8001cc0 <HAL_DMA_Start_IT>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80a5 	beq.w	80040a2 <HAL_TIM_DMABurst_MultiWriteStart+0x1fa>
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0c2      	b.n	80040e2 <HAL_TIM_DMABurst_MultiWriteStart+0x23a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	4a65      	ldr	r2, [pc, #404]	; (80040f8 <HAL_TIM_DMABurst_MultiWriteStart+0x250>)
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	4a64      	ldr	r2, [pc, #400]	; (80040fc <HAL_TIM_DMABurst_MultiWriteStart+0x254>)
 8003f6a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	4a60      	ldr	r2, [pc, #384]	; (80040f4 <HAL_TIM_DMABurst_MultiWriteStart+0x24c>)
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003f78:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 8003f80:	461a      	mov	r2, r3
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f7fd fe9c 	bl	8001cc0 <HAL_DMA_Start_IT>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 808b 	beq.w	80040a6 <HAL_TIM_DMABurst_MultiWriteStart+0x1fe>
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0a6      	b.n	80040e2 <HAL_TIM_DMABurst_MultiWriteStart+0x23a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	4a57      	ldr	r2, [pc, #348]	; (80040f8 <HAL_TIM_DMABurst_MultiWriteStart+0x250>)
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	4a56      	ldr	r2, [pc, #344]	; (80040fc <HAL_TIM_DMABurst_MultiWriteStart+0x254>)
 8003fa2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	4a52      	ldr	r2, [pc, #328]	; (80040f4 <HAL_TIM_DMABurst_MultiWriteStart+0x24c>)
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003fb0:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 8003fb8:	461a      	mov	r2, r3
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f7fd fe80 	bl	8001cc0 <HAL_DMA_Start_IT>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d071      	beq.n	80040aa <HAL_TIM_DMABurst_MultiWriteStart+0x202>
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e08b      	b.n	80040e2 <HAL_TIM_DMABurst_MultiWriteStart+0x23a>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	4a4a      	ldr	r2, [pc, #296]	; (80040f8 <HAL_TIM_DMABurst_MultiWriteStart+0x250>)
 8003fd0:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	4a49      	ldr	r2, [pc, #292]	; (80040fc <HAL_TIM_DMABurst_MultiWriteStart+0x254>)
 8003fd8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	4a45      	ldr	r2, [pc, #276]	; (80040f4 <HAL_TIM_DMABurst_MultiWriteStart+0x24c>)
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003fe6:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 8003fee:	461a      	mov	r2, r3
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f7fd fe65 	bl	8001cc0 <HAL_DMA_Start_IT>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d058      	beq.n	80040ae <HAL_TIM_DMABurst_MultiWriteStart+0x206>
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e070      	b.n	80040e2 <HAL_TIM_DMABurst_MultiWriteStart+0x23a>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	4a3c      	ldr	r2, [pc, #240]	; (80040f8 <HAL_TIM_DMABurst_MultiWriteStart+0x250>)
 8004006:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	4a3b      	ldr	r2, [pc, #236]	; (80040fc <HAL_TIM_DMABurst_MultiWriteStart+0x254>)
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	4a37      	ldr	r2, [pc, #220]	; (80040f4 <HAL_TIM_DMABurst_MultiWriteStart+0x24c>)
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800401c:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 8004024:	461a      	mov	r2, r3
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f7fd fe4a 	bl	8001cc0 <HAL_DMA_Start_IT>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d03f      	beq.n	80040b2 <HAL_TIM_DMABurst_MultiWriteStart+0x20a>
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e055      	b.n	80040e2 <HAL_TIM_DMABurst_MultiWriteStart+0x23a>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403a:	4a31      	ldr	r2, [pc, #196]	; (8004100 <HAL_TIM_DMABurst_MultiWriteStart+0x258>)
 800403c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	4a30      	ldr	r2, [pc, #192]	; (8004104 <HAL_TIM_DMABurst_MultiWriteStart+0x25c>)
 8004044:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404a:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <HAL_TIM_DMABurst_MultiWriteStart+0x24c>)
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004052:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 800405a:	461a      	mov	r2, r3
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f7fd fe2f 	bl	8001cc0 <HAL_DMA_Start_IT>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d026      	beq.n	80040b6 <HAL_TIM_DMABurst_MultiWriteStart+0x20e>
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e03a      	b.n	80040e2 <HAL_TIM_DMABurst_MultiWriteStart+0x23a>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	4a25      	ldr	r2, [pc, #148]	; (8004108 <HAL_TIM_DMABurst_MultiWriteStart+0x260>)
 8004072:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	4a24      	ldr	r2, [pc, #144]	; (800410c <HAL_TIM_DMABurst_MultiWriteStart+0x264>)
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <HAL_TIM_DMABurst_MultiWriteStart+0x24c>)
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004088:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8004090:	461a      	mov	r2, r3
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f7fd fe14 	bl	8001cc0 <HAL_DMA_Start_IT>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00d      	beq.n	80040ba <HAL_TIM_DMABurst_MultiWriteStart+0x212>
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e01f      	b.n	80040e2 <HAL_TIM_DMABurst_MultiWriteStart+0x23a>
      break;
 80040a2:	bf00      	nop
 80040a4:	e00a      	b.n	80040bc <HAL_TIM_DMABurst_MultiWriteStart+0x214>
      break;
 80040a6:	bf00      	nop
 80040a8:	e008      	b.n	80040bc <HAL_TIM_DMABurst_MultiWriteStart+0x214>
      break;
 80040aa:	bf00      	nop
 80040ac:	e006      	b.n	80040bc <HAL_TIM_DMABurst_MultiWriteStart+0x214>
      break;
 80040ae:	bf00      	nop
 80040b0:	e004      	b.n	80040bc <HAL_TIM_DMABurst_MultiWriteStart+0x214>
      break;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <HAL_TIM_DMABurst_MultiWriteStart+0x214>
      break;
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <HAL_TIM_DMABurst_MultiWriteStart+0x214>
      break;
 80040ba:	bf00      	nop
  }

  /* Configure the DMA Burst Mode */
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	649a      	str	r2, [r3, #72]	; 0x48
  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68d9      	ldr	r1, [r3, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	0800428d 	.word	0x0800428d
 80040f0:	080042b1 	.word	0x080042b1
 80040f4:	08004189 	.word	0x08004189
 80040f8:	080041ad 	.word	0x080041ad
 80040fc:	0800421d 	.word	0x0800421d
 8004100:	08004be5 	.word	0x08004be5
 8004104:	08004c09 	.word	0x08004c09
 8004108:	080042d5 	.word	0x080042d5
 800410c:	080042f9 	.word	0x080042f9

08004110 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f7ff ffe8 	bl	8004174 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d103      	bne.n	80041d4 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	771a      	strb	r2, [r3, #28]
 80041d2:	e019      	b.n	8004208 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d103      	bne.n	80041e6 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2202      	movs	r2, #2
 80041e2:	771a      	strb	r2, [r3, #28]
 80041e4:	e010      	b.n	8004208 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d103      	bne.n	80041f8 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2204      	movs	r2, #4
 80041f4:	771a      	strb	r2, [r3, #28]
 80041f6:	e007      	b.n	8004208 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d102      	bne.n	8004208 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2208      	movs	r2, #8
 8004206:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff ff8b 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d103      	bne.n	8004244 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	771a      	strb	r2, [r3, #28]
 8004242:	e019      	b.n	8004278 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	429a      	cmp	r2, r3
 800424c:	d103      	bne.n	8004256 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2202      	movs	r2, #2
 8004252:	771a      	strb	r2, [r3, #28]
 8004254:	e010      	b.n	8004278 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	d103      	bne.n	8004268 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2204      	movs	r2, #4
 8004264:	771a      	strb	r2, [r3, #28]
 8004266:	e007      	b.n	8004278 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	429a      	cmp	r2, r3
 8004270:	d102      	bne.n	8004278 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2208      	movs	r2, #8
 8004276:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff ff5d 	bl	8004138 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7fd f842 	bl	800132c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f7ff ff22 	bl	8004110 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerCallback(htim);
#else
  HAL_TIM_TriggerCallback(htim);
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7ff ff2e 	bl	800414c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <TIM_DMATriggerHalfCplt>:
  * @brief  TIM DMA Trigger half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerHalfCpltCallback(htim);
#else
  HAL_TIM_TriggerHalfCpltCallback(htim);
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff ff26 	bl	8004160 <HAL_TIM_TriggerHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a42      	ldr	r2, [pc, #264]	; (8004438 <TIM_Base_SetConfig+0x11c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433a:	d00f      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a3f      	ldr	r2, [pc, #252]	; (800443c <TIM_Base_SetConfig+0x120>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00b      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a3e      	ldr	r2, [pc, #248]	; (8004440 <TIM_Base_SetConfig+0x124>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d007      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a3d      	ldr	r2, [pc, #244]	; (8004444 <TIM_Base_SetConfig+0x128>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a3c      	ldr	r2, [pc, #240]	; (8004448 <TIM_Base_SetConfig+0x12c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d108      	bne.n	800436e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a31      	ldr	r2, [pc, #196]	; (8004438 <TIM_Base_SetConfig+0x11c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01f      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437c:	d01b      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a2e      	ldr	r2, [pc, #184]	; (800443c <TIM_Base_SetConfig+0x120>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d017      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a2d      	ldr	r2, [pc, #180]	; (8004440 <TIM_Base_SetConfig+0x124>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2c      	ldr	r2, [pc, #176]	; (8004444 <TIM_Base_SetConfig+0x128>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00f      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2c      	ldr	r2, [pc, #176]	; (800444c <TIM_Base_SetConfig+0x130>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00b      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2b      	ldr	r2, [pc, #172]	; (8004450 <TIM_Base_SetConfig+0x134>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2a      	ldr	r2, [pc, #168]	; (8004454 <TIM_Base_SetConfig+0x138>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_Base_SetConfig+0x9a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a25      	ldr	r2, [pc, #148]	; (8004448 <TIM_Base_SetConfig+0x12c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d108      	bne.n	80043c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a12      	ldr	r2, [pc, #72]	; (8004438 <TIM_Base_SetConfig+0x11c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <TIM_Base_SetConfig+0x100>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <TIM_Base_SetConfig+0x128>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00f      	beq.n	800441c <TIM_Base_SetConfig+0x100>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a13      	ldr	r2, [pc, #76]	; (800444c <TIM_Base_SetConfig+0x130>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00b      	beq.n	800441c <TIM_Base_SetConfig+0x100>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <TIM_Base_SetConfig+0x134>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d007      	beq.n	800441c <TIM_Base_SetConfig+0x100>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a11      	ldr	r2, [pc, #68]	; (8004454 <TIM_Base_SetConfig+0x138>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_Base_SetConfig+0x100>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <TIM_Base_SetConfig+0x12c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d103      	bne.n	8004424 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	615a      	str	r2, [r3, #20]
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800
 8004444:	40013400 	.word	0x40013400
 8004448:	40015000 	.word	0x40015000
 800444c:	40014000 	.word	0x40014000
 8004450:	40014400 	.word	0x40014400
 8004454:	40014800 	.word	0x40014800

08004458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f023 0201 	bic.w	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0303 	bic.w	r3, r3, #3
 8004492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f023 0302 	bic.w	r3, r3, #2
 80044a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a30      	ldr	r2, [pc, #192]	; (8004574 <TIM_OC1_SetConfig+0x11c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <TIM_OC1_SetConfig+0x88>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a2f      	ldr	r2, [pc, #188]	; (8004578 <TIM_OC1_SetConfig+0x120>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00f      	beq.n	80044e0 <TIM_OC1_SetConfig+0x88>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a2e      	ldr	r2, [pc, #184]	; (800457c <TIM_OC1_SetConfig+0x124>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00b      	beq.n	80044e0 <TIM_OC1_SetConfig+0x88>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <TIM_OC1_SetConfig+0x128>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d007      	beq.n	80044e0 <TIM_OC1_SetConfig+0x88>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <TIM_OC1_SetConfig+0x12c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_OC1_SetConfig+0x88>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a2b      	ldr	r2, [pc, #172]	; (8004588 <TIM_OC1_SetConfig+0x130>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10c      	bne.n	80044fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f023 0308 	bic.w	r3, r3, #8
 80044e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <TIM_OC1_SetConfig+0x11c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <TIM_OC1_SetConfig+0xd2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <TIM_OC1_SetConfig+0x120>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00f      	beq.n	800452a <TIM_OC1_SetConfig+0xd2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1b      	ldr	r2, [pc, #108]	; (800457c <TIM_OC1_SetConfig+0x124>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00b      	beq.n	800452a <TIM_OC1_SetConfig+0xd2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a1a      	ldr	r2, [pc, #104]	; (8004580 <TIM_OC1_SetConfig+0x128>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d007      	beq.n	800452a <TIM_OC1_SetConfig+0xd2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a19      	ldr	r2, [pc, #100]	; (8004584 <TIM_OC1_SetConfig+0x12c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d003      	beq.n	800452a <TIM_OC1_SetConfig+0xd2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a18      	ldr	r2, [pc, #96]	; (8004588 <TIM_OC1_SetConfig+0x130>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d111      	bne.n	800454e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	621a      	str	r2, [r3, #32]
}
 8004568:	bf00      	nop
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40013400 	.word	0x40013400
 800457c:	40014000 	.word	0x40014000
 8004580:	40014400 	.word	0x40014400
 8004584:	40014800 	.word	0x40014800
 8004588:	40015000 	.word	0x40015000

0800458c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0210 	bic.w	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0320 	bic.w	r3, r3, #32
 80045da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a2c      	ldr	r2, [pc, #176]	; (800469c <TIM_OC2_SetConfig+0x110>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d007      	beq.n	8004600 <TIM_OC2_SetConfig+0x74>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a2b      	ldr	r2, [pc, #172]	; (80046a0 <TIM_OC2_SetConfig+0x114>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_OC2_SetConfig+0x74>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <TIM_OC2_SetConfig+0x118>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d10d      	bne.n	800461c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800461a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a1f      	ldr	r2, [pc, #124]	; (800469c <TIM_OC2_SetConfig+0x110>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d013      	beq.n	800464c <TIM_OC2_SetConfig+0xc0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <TIM_OC2_SetConfig+0x114>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00f      	beq.n	800464c <TIM_OC2_SetConfig+0xc0>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <TIM_OC2_SetConfig+0x11c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00b      	beq.n	800464c <TIM_OC2_SetConfig+0xc0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <TIM_OC2_SetConfig+0x120>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <TIM_OC2_SetConfig+0xc0>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a1c      	ldr	r2, [pc, #112]	; (80046b0 <TIM_OC2_SetConfig+0x124>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_OC2_SetConfig+0xc0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <TIM_OC2_SetConfig+0x118>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d113      	bne.n	8004674 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004652:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800465a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40013400 	.word	0x40013400
 80046a4:	40015000 	.word	0x40015000
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40014400 	.word	0x40014400
 80046b0:	40014800 	.word	0x40014800

080046b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a2b      	ldr	r2, [pc, #172]	; (80047c0 <TIM_OC3_SetConfig+0x10c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_OC3_SetConfig+0x72>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a2a      	ldr	r2, [pc, #168]	; (80047c4 <TIM_OC3_SetConfig+0x110>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_OC3_SetConfig+0x72>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <TIM_OC3_SetConfig+0x114>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d10d      	bne.n	8004742 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800472c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004740:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <TIM_OC3_SetConfig+0x10c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d013      	beq.n	8004772 <TIM_OC3_SetConfig+0xbe>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <TIM_OC3_SetConfig+0x110>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00f      	beq.n	8004772 <TIM_OC3_SetConfig+0xbe>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <TIM_OC3_SetConfig+0x118>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00b      	beq.n	8004772 <TIM_OC3_SetConfig+0xbe>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <TIM_OC3_SetConfig+0x11c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d007      	beq.n	8004772 <TIM_OC3_SetConfig+0xbe>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <TIM_OC3_SetConfig+0x120>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d003      	beq.n	8004772 <TIM_OC3_SetConfig+0xbe>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a16      	ldr	r2, [pc, #88]	; (80047c8 <TIM_OC3_SetConfig+0x114>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d113      	bne.n	800479a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	621a      	str	r2, [r3, #32]
}
 80047b4:	bf00      	nop
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40013400 	.word	0x40013400
 80047c8:	40015000 	.word	0x40015000
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40014400 	.word	0x40014400
 80047d4:	40014800 	.word	0x40014800

080047d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	031b      	lsls	r3, r3, #12
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a1a      	ldr	r2, [pc, #104]	; (80048a0 <TIM_OC4_SetConfig+0xc8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <TIM_OC4_SetConfig+0x8c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <TIM_OC4_SetConfig+0xcc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00f      	beq.n	8004864 <TIM_OC4_SetConfig+0x8c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <TIM_OC4_SetConfig+0xd0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00b      	beq.n	8004864 <TIM_OC4_SetConfig+0x8c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a17      	ldr	r2, [pc, #92]	; (80048ac <TIM_OC4_SetConfig+0xd4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d007      	beq.n	8004864 <TIM_OC4_SetConfig+0x8c>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <TIM_OC4_SetConfig+0xd8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_OC4_SetConfig+0x8c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a15      	ldr	r2, [pc, #84]	; (80048b4 <TIM_OC4_SetConfig+0xdc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d109      	bne.n	8004878 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800486a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	019b      	lsls	r3, r3, #6
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	40013400 	.word	0x40013400
 80048a8:	40014000 	.word	0x40014000
 80048ac:	40014400 	.word	0x40014400
 80048b0:	40014800 	.word	0x40014800
 80048b4:	40015000 	.word	0x40015000

080048b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	041b      	lsls	r3, r3, #16
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a19      	ldr	r2, [pc, #100]	; (8004974 <TIM_OC5_SetConfig+0xbc>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <TIM_OC5_SetConfig+0x82>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a18      	ldr	r2, [pc, #96]	; (8004978 <TIM_OC5_SetConfig+0xc0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00f      	beq.n	800493a <TIM_OC5_SetConfig+0x82>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a17      	ldr	r2, [pc, #92]	; (800497c <TIM_OC5_SetConfig+0xc4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00b      	beq.n	800493a <TIM_OC5_SetConfig+0x82>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a16      	ldr	r2, [pc, #88]	; (8004980 <TIM_OC5_SetConfig+0xc8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d007      	beq.n	800493a <TIM_OC5_SetConfig+0x82>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a15      	ldr	r2, [pc, #84]	; (8004984 <TIM_OC5_SetConfig+0xcc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_OC5_SetConfig+0x82>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a14      	ldr	r2, [pc, #80]	; (8004988 <TIM_OC5_SetConfig+0xd0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d109      	bne.n	800494e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004940:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	621a      	str	r2, [r3, #32]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40013400 	.word	0x40013400
 800497c:	40014000 	.word	0x40014000
 8004980:	40014400 	.word	0x40014400
 8004984:	40014800 	.word	0x40014800
 8004988:	40015000 	.word	0x40015000

0800498c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	051b      	lsls	r3, r3, #20
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a1a      	ldr	r2, [pc, #104]	; (8004a4c <TIM_OC6_SetConfig+0xc0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d013      	beq.n	8004a10 <TIM_OC6_SetConfig+0x84>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <TIM_OC6_SetConfig+0xc4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00f      	beq.n	8004a10 <TIM_OC6_SetConfig+0x84>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <TIM_OC6_SetConfig+0xc8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00b      	beq.n	8004a10 <TIM_OC6_SetConfig+0x84>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <TIM_OC6_SetConfig+0xcc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <TIM_OC6_SetConfig+0x84>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <TIM_OC6_SetConfig+0xd0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_OC6_SetConfig+0x84>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <TIM_OC6_SetConfig+0xd4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d109      	bne.n	8004a24 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	029b      	lsls	r3, r3, #10
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	621a      	str	r2, [r3, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40013400 	.word	0x40013400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800
 8004a60:	40015000 	.word	0x40015000

08004a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	2201      	movs	r2, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a1a      	ldr	r2, [r3, #32]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	43db      	mvns	r3, r3
 8004a86:	401a      	ands	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1a      	ldr	r2, [r3, #32]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e06a      	b.n	8004ba2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	041b      	lsls	r3, r3, #16
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d009      	beq.n	8004b64 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a17      	ldr	r2, [pc, #92]	; (8004bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d004      	beq.n	8004b64 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d115      	bne.n	8004b90 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	051b      	lsls	r3, r3, #20
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40013400 	.word	0x40013400
 8004bb8:	40015000 	.word	0x40015000

08004bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationCallback(htim);
#else
  HAL_TIMEx_CommutCallback(htim);
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7ff ffde 	bl	8004bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <TIMEx_DMACommutationHalfCplt>:
  * @brief  TIM DMA Commutation half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationHalfCpltCallback(htim);
#else
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff ffd6 	bl	8004bd0 <HAL_TIMEx_CommutHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e040      	b.n	8004cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fc54 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2224      	movs	r2, #36	; 0x24
 8004c58:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0201 	bic.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8c0 	bl	8004df0 <UART_SetConfig>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e022      	b.n	8004cc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 face 	bl	8005224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fb55 	bl	8005368 <UART_CheckIdleState>
 8004cbe:	4603      	mov	r3, r0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	; 0x28
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	f040 8081 	bne.w	8004de4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_UART_Transmit+0x26>
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e079      	b.n	8004de6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_UART_Transmit+0x38>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e072      	b.n	8004de6 <HAL_UART_Transmit+0x11e>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2221      	movs	r2, #33	; 0x21
 8004d12:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004d14:	f7fc fe4e 	bl	80019b4 <HAL_GetTick>
 8004d18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	88fa      	ldrh	r2, [r7, #6]
 8004d26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d32:	d108      	bne.n	8004d46 <HAL_UART_Transmit+0x7e>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	e003      	b.n	8004d4e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d4e:	e02d      	b.n	8004dac <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2200      	movs	r2, #0
 8004d58:	2180      	movs	r1, #128	; 0x80
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 fb49 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e03d      	b.n	8004de6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10b      	bne.n	8004d88 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	881a      	ldrh	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7c:	b292      	uxth	r2, r2
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	3302      	adds	r3, #2
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e008      	b.n	8004d9a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	b292      	uxth	r2, r2
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	3301      	adds	r3, #1
 8004d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1cb      	bne.n	8004d50 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2140      	movs	r1, #64	; 0x40
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 fb15 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e009      	b.n	8004de6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e000      	b.n	8004de6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004de4:	2302      	movs	r3, #2
  }
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3720      	adds	r7, #32
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4bac      	ldr	r3, [pc, #688]	; (80050d0 <UART_SetConfig+0x2e0>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	6939      	ldr	r1, [r7, #16]
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a9a      	ldr	r2, [pc, #616]	; (80050d4 <UART_SetConfig+0x2e4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d121      	bne.n	8004eb4 <UART_SetConfig+0xc4>
 8004e70:	4b99      	ldr	r3, [pc, #612]	; (80050d8 <UART_SetConfig+0x2e8>)
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d817      	bhi.n	8004eac <UART_SetConfig+0xbc>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <UART_SetConfig+0x94>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004ea1 	.word	0x08004ea1
 8004e8c:	08004ea7 	.word	0x08004ea7
 8004e90:	08004e9b 	.word	0x08004e9b
 8004e94:	2301      	movs	r3, #1
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e0b2      	b.n	8005000 <UART_SetConfig+0x210>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e0af      	b.n	8005000 <UART_SetConfig+0x210>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e0ac      	b.n	8005000 <UART_SetConfig+0x210>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e0a9      	b.n	8005000 <UART_SetConfig+0x210>
 8004eac:	2310      	movs	r3, #16
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	bf00      	nop
 8004eb2:	e0a5      	b.n	8005000 <UART_SetConfig+0x210>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a88      	ldr	r2, [pc, #544]	; (80050dc <UART_SetConfig+0x2ec>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d123      	bne.n	8004f06 <UART_SetConfig+0x116>
 8004ebe:	4b86      	ldr	r3, [pc, #536]	; (80050d8 <UART_SetConfig+0x2e8>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eca:	d012      	beq.n	8004ef2 <UART_SetConfig+0x102>
 8004ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed0:	d802      	bhi.n	8004ed8 <UART_SetConfig+0xe8>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <UART_SetConfig+0xf6>
 8004ed6:	e012      	b.n	8004efe <UART_SetConfig+0x10e>
 8004ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004edc:	d00c      	beq.n	8004ef8 <UART_SetConfig+0x108>
 8004ede:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ee2:	d003      	beq.n	8004eec <UART_SetConfig+0xfc>
 8004ee4:	e00b      	b.n	8004efe <UART_SetConfig+0x10e>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e089      	b.n	8005000 <UART_SetConfig+0x210>
 8004eec:	2302      	movs	r3, #2
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e086      	b.n	8005000 <UART_SetConfig+0x210>
 8004ef2:	2304      	movs	r3, #4
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e083      	b.n	8005000 <UART_SetConfig+0x210>
 8004ef8:	2308      	movs	r3, #8
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e080      	b.n	8005000 <UART_SetConfig+0x210>
 8004efe:	2310      	movs	r3, #16
 8004f00:	77fb      	strb	r3, [r7, #31]
 8004f02:	bf00      	nop
 8004f04:	e07c      	b.n	8005000 <UART_SetConfig+0x210>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a75      	ldr	r2, [pc, #468]	; (80050e0 <UART_SetConfig+0x2f0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d123      	bne.n	8004f58 <UART_SetConfig+0x168>
 8004f10:	4b71      	ldr	r3, [pc, #452]	; (80050d8 <UART_SetConfig+0x2e8>)
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004f18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f1c:	d012      	beq.n	8004f44 <UART_SetConfig+0x154>
 8004f1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f22:	d802      	bhi.n	8004f2a <UART_SetConfig+0x13a>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <UART_SetConfig+0x148>
 8004f28:	e012      	b.n	8004f50 <UART_SetConfig+0x160>
 8004f2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f2e:	d00c      	beq.n	8004f4a <UART_SetConfig+0x15a>
 8004f30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f34:	d003      	beq.n	8004f3e <UART_SetConfig+0x14e>
 8004f36:	e00b      	b.n	8004f50 <UART_SetConfig+0x160>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e060      	b.n	8005000 <UART_SetConfig+0x210>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e05d      	b.n	8005000 <UART_SetConfig+0x210>
 8004f44:	2304      	movs	r3, #4
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e05a      	b.n	8005000 <UART_SetConfig+0x210>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	e057      	b.n	8005000 <UART_SetConfig+0x210>
 8004f50:	2310      	movs	r3, #16
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	bf00      	nop
 8004f56:	e053      	b.n	8005000 <UART_SetConfig+0x210>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a61      	ldr	r2, [pc, #388]	; (80050e4 <UART_SetConfig+0x2f4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d123      	bne.n	8004faa <UART_SetConfig+0x1ba>
 8004f62:	4b5d      	ldr	r3, [pc, #372]	; (80050d8 <UART_SetConfig+0x2e8>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f6e:	d012      	beq.n	8004f96 <UART_SetConfig+0x1a6>
 8004f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f74:	d802      	bhi.n	8004f7c <UART_SetConfig+0x18c>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <UART_SetConfig+0x19a>
 8004f7a:	e012      	b.n	8004fa2 <UART_SetConfig+0x1b2>
 8004f7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f80:	d00c      	beq.n	8004f9c <UART_SetConfig+0x1ac>
 8004f82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f86:	d003      	beq.n	8004f90 <UART_SetConfig+0x1a0>
 8004f88:	e00b      	b.n	8004fa2 <UART_SetConfig+0x1b2>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e037      	b.n	8005000 <UART_SetConfig+0x210>
 8004f90:	2302      	movs	r3, #2
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e034      	b.n	8005000 <UART_SetConfig+0x210>
 8004f96:	2304      	movs	r3, #4
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	e031      	b.n	8005000 <UART_SetConfig+0x210>
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e02e      	b.n	8005000 <UART_SetConfig+0x210>
 8004fa2:	2310      	movs	r3, #16
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	bf00      	nop
 8004fa8:	e02a      	b.n	8005000 <UART_SetConfig+0x210>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a4e      	ldr	r2, [pc, #312]	; (80050e8 <UART_SetConfig+0x2f8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d123      	bne.n	8004ffc <UART_SetConfig+0x20c>
 8004fb4:	4b48      	ldr	r3, [pc, #288]	; (80050d8 <UART_SetConfig+0x2e8>)
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fc0:	d012      	beq.n	8004fe8 <UART_SetConfig+0x1f8>
 8004fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fc6:	d802      	bhi.n	8004fce <UART_SetConfig+0x1de>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <UART_SetConfig+0x1ec>
 8004fcc:	e012      	b.n	8004ff4 <UART_SetConfig+0x204>
 8004fce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd2:	d00c      	beq.n	8004fee <UART_SetConfig+0x1fe>
 8004fd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fd8:	d003      	beq.n	8004fe2 <UART_SetConfig+0x1f2>
 8004fda:	e00b      	b.n	8004ff4 <UART_SetConfig+0x204>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e00e      	b.n	8005000 <UART_SetConfig+0x210>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e00b      	b.n	8005000 <UART_SetConfig+0x210>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e008      	b.n	8005000 <UART_SetConfig+0x210>
 8004fee:	2308      	movs	r3, #8
 8004ff0:	77fb      	strb	r3, [r7, #31]
 8004ff2:	e005      	b.n	8005000 <UART_SetConfig+0x210>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	bf00      	nop
 8004ffa:	e001      	b.n	8005000 <UART_SetConfig+0x210>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005008:	f040 8090 	bne.w	800512c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 800500c:	7ffb      	ldrb	r3, [r7, #31]
 800500e:	2b08      	cmp	r3, #8
 8005010:	d86c      	bhi.n	80050ec <UART_SetConfig+0x2fc>
 8005012:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <UART_SetConfig+0x228>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	0800503d 	.word	0x0800503d
 800501c:	0800505d 	.word	0x0800505d
 8005020:	0800507d 	.word	0x0800507d
 8005024:	080050ed 	.word	0x080050ed
 8005028:	08005099 	.word	0x08005099
 800502c:	080050ed 	.word	0x080050ed
 8005030:	080050ed 	.word	0x080050ed
 8005034:	080050ed 	.word	0x080050ed
 8005038:	080050b9 	.word	0x080050b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800503c:	f7fe fa86 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8005040:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	005a      	lsls	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	085b      	lsrs	r3, r3, #1
 800504c:	441a      	add	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	b29b      	uxth	r3, r3
 8005058:	61bb      	str	r3, [r7, #24]
        break;
 800505a:	e04a      	b.n	80050f2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800505c:	f7fe fa98 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 8005060:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	005a      	lsls	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	441a      	add	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	fbb2 f3f3 	udiv	r3, r2, r3
 8005076:	b29b      	uxth	r3, r3
 8005078:	61bb      	str	r3, [r7, #24]
        break;
 800507a:	e03a      	b.n	80050f2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005086:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6852      	ldr	r2, [r2, #4]
 800508e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005092:	b29b      	uxth	r3, r3
 8005094:	61bb      	str	r3, [r7, #24]
        break;
 8005096:	e02c      	b.n	80050f2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005098:	f7fe f9e2 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800509c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	005a      	lsls	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	085b      	lsrs	r3, r3, #1
 80050a8:	441a      	add	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	61bb      	str	r3, [r7, #24]
        break;
 80050b6:	e01c      	b.n	80050f2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	61bb      	str	r3, [r7, #24]
        break;
 80050ce:	e010      	b.n	80050f2 <UART_SetConfig+0x302>
 80050d0:	efff69f3 	.word	0xefff69f3
 80050d4:	40013800 	.word	0x40013800
 80050d8:	40021000 	.word	0x40021000
 80050dc:	40004400 	.word	0x40004400
 80050e0:	40004800 	.word	0x40004800
 80050e4:	40004c00 	.word	0x40004c00
 80050e8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
        break;
 80050f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b0f      	cmp	r3, #15
 80050f6:	d916      	bls.n	8005126 <UART_SetConfig+0x336>
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fe:	d212      	bcs.n	8005126 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f023 030f 	bic.w	r3, r3, #15
 8005108:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	085b      	lsrs	r3, r3, #1
 800510e:	b29b      	uxth	r3, r3
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	b29a      	uxth	r2, r3
 8005116:	897b      	ldrh	r3, [r7, #10]
 8005118:	4313      	orrs	r3, r2
 800511a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	897a      	ldrh	r2, [r7, #10]
 8005122:	60da      	str	r2, [r3, #12]
 8005124:	e072      	b.n	800520c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	75fb      	strb	r3, [r7, #23]
 800512a:	e06f      	b.n	800520c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800512c:	7ffb      	ldrb	r3, [r7, #31]
 800512e:	2b08      	cmp	r3, #8
 8005130:	d85b      	bhi.n	80051ea <UART_SetConfig+0x3fa>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <UART_SetConfig+0x348>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	0800515d 	.word	0x0800515d
 800513c:	0800517b 	.word	0x0800517b
 8005140:	08005199 	.word	0x08005199
 8005144:	080051eb 	.word	0x080051eb
 8005148:	080051b5 	.word	0x080051b5
 800514c:	080051eb 	.word	0x080051eb
 8005150:	080051eb 	.word	0x080051eb
 8005154:	080051eb 	.word	0x080051eb
 8005158:	080051d3 	.word	0x080051d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800515c:	f7fe f9f6 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8005160:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	085a      	lsrs	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	441a      	add	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	fbb2 f3f3 	udiv	r3, r2, r3
 8005174:	b29b      	uxth	r3, r3
 8005176:	61bb      	str	r3, [r7, #24]
        break;
 8005178:	e03a      	b.n	80051f0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800517a:	f7fe fa09 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 800517e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	085a      	lsrs	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	441a      	add	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005192:	b29b      	uxth	r3, r3
 8005194:	61bb      	str	r3, [r7, #24]
        break;
 8005196:	e02b      	b.n	80051f0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80051a2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6852      	ldr	r2, [r2, #4]
 80051aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	61bb      	str	r3, [r7, #24]
        break;
 80051b2:	e01d      	b.n	80051f0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051b4:	f7fe f954 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 80051b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	085a      	lsrs	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	441a      	add	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	61bb      	str	r3, [r7, #24]
        break;
 80051d0:	e00e      	b.n	80051f0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	61bb      	str	r3, [r7, #24]
        break;
 80051e8:	e002      	b.n	80051f0 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	75fb      	strb	r3, [r7, #23]
        break;
 80051ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b0f      	cmp	r3, #15
 80051f4:	d908      	bls.n	8005208 <UART_SetConfig+0x418>
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fc:	d204      	bcs.n	8005208 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	60da      	str	r2, [r3, #12]
 8005206:	e001      	b.n	800520c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005218:	7dfb      	ldrb	r3, [r7, #23]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop

08005224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01a      	beq.n	800533a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005322:	d10a      	bne.n	800533a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	605a      	str	r2, [r3, #4]
  }
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af02      	add	r7, sp, #8
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005376:	f7fc fb1d 	bl	80019b4 <HAL_GetTick>
 800537a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b08      	cmp	r3, #8
 8005388:	d10e      	bne.n	80053a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800538a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f82a 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e020      	b.n	80053ea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d10e      	bne.n	80053d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f814 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e00a      	b.n	80053ea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	4613      	mov	r3, r2
 8005400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005402:	e05d      	b.n	80054c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d059      	beq.n	80054c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540c:	f7fc fad2 	bl	80019b4 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	429a      	cmp	r2, r3
 800541a:	d302      	bcc.n	8005422 <UART_WaitOnFlagUntilTimeout+0x30>
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d11b      	bne.n	800545a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005430:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e042      	b.n	80054e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d02b      	beq.n	80054c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005476:	d123      	bne.n	80054c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005480:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005490:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2220      	movs	r2, #32
 80054b2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e00f      	b.n	80054e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4013      	ands	r3, r2
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	bf0c      	ite	eq
 80054d0:	2301      	moveq	r3, #1
 80054d2:	2300      	movne	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	461a      	mov	r2, r3
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d092      	beq.n	8005404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <__errno>:
 80054e8:	4b01      	ldr	r3, [pc, #4]	; (80054f0 <__errno+0x8>)
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20000018 	.word	0x20000018

080054f4 <__libc_init_array>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	4e0d      	ldr	r6, [pc, #52]	; (800552c <__libc_init_array+0x38>)
 80054f8:	4c0d      	ldr	r4, [pc, #52]	; (8005530 <__libc_init_array+0x3c>)
 80054fa:	1ba4      	subs	r4, r4, r6
 80054fc:	10a4      	asrs	r4, r4, #2
 80054fe:	2500      	movs	r5, #0
 8005500:	42a5      	cmp	r5, r4
 8005502:	d109      	bne.n	8005518 <__libc_init_array+0x24>
 8005504:	4e0b      	ldr	r6, [pc, #44]	; (8005534 <__libc_init_array+0x40>)
 8005506:	4c0c      	ldr	r4, [pc, #48]	; (8005538 <__libc_init_array+0x44>)
 8005508:	f001 f874 	bl	80065f4 <_init>
 800550c:	1ba4      	subs	r4, r4, r6
 800550e:	10a4      	asrs	r4, r4, #2
 8005510:	2500      	movs	r5, #0
 8005512:	42a5      	cmp	r5, r4
 8005514:	d105      	bne.n	8005522 <__libc_init_array+0x2e>
 8005516:	bd70      	pop	{r4, r5, r6, pc}
 8005518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800551c:	4798      	blx	r3
 800551e:	3501      	adds	r5, #1
 8005520:	e7ee      	b.n	8005500 <__libc_init_array+0xc>
 8005522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005526:	4798      	blx	r3
 8005528:	3501      	adds	r5, #1
 800552a:	e7f2      	b.n	8005512 <__libc_init_array+0x1e>
 800552c:	08006758 	.word	0x08006758
 8005530:	08006758 	.word	0x08006758
 8005534:	08006758 	.word	0x08006758
 8005538:	0800675c 	.word	0x0800675c

0800553c <memset>:
 800553c:	4402      	add	r2, r0
 800553e:	4603      	mov	r3, r0
 8005540:	4293      	cmp	r3, r2
 8005542:	d100      	bne.n	8005546 <memset+0xa>
 8005544:	4770      	bx	lr
 8005546:	f803 1b01 	strb.w	r1, [r3], #1
 800554a:	e7f9      	b.n	8005540 <memset+0x4>

0800554c <iprintf>:
 800554c:	b40f      	push	{r0, r1, r2, r3}
 800554e:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <iprintf+0x2c>)
 8005550:	b513      	push	{r0, r1, r4, lr}
 8005552:	681c      	ldr	r4, [r3, #0]
 8005554:	b124      	cbz	r4, 8005560 <iprintf+0x14>
 8005556:	69a3      	ldr	r3, [r4, #24]
 8005558:	b913      	cbnz	r3, 8005560 <iprintf+0x14>
 800555a:	4620      	mov	r0, r4
 800555c:	f000 fa22 	bl	80059a4 <__sinit>
 8005560:	ab05      	add	r3, sp, #20
 8005562:	9a04      	ldr	r2, [sp, #16]
 8005564:	68a1      	ldr	r1, [r4, #8]
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	4620      	mov	r0, r4
 800556a:	f000 fbdb 	bl	8005d24 <_vfiprintf_r>
 800556e:	b002      	add	sp, #8
 8005570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005574:	b004      	add	sp, #16
 8005576:	4770      	bx	lr
 8005578:	20000018 	.word	0x20000018

0800557c <_puts_r>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	460e      	mov	r6, r1
 8005580:	4605      	mov	r5, r0
 8005582:	b118      	cbz	r0, 800558c <_puts_r+0x10>
 8005584:	6983      	ldr	r3, [r0, #24]
 8005586:	b90b      	cbnz	r3, 800558c <_puts_r+0x10>
 8005588:	f000 fa0c 	bl	80059a4 <__sinit>
 800558c:	69ab      	ldr	r3, [r5, #24]
 800558e:	68ac      	ldr	r4, [r5, #8]
 8005590:	b913      	cbnz	r3, 8005598 <_puts_r+0x1c>
 8005592:	4628      	mov	r0, r5
 8005594:	f000 fa06 	bl	80059a4 <__sinit>
 8005598:	4b23      	ldr	r3, [pc, #140]	; (8005628 <_puts_r+0xac>)
 800559a:	429c      	cmp	r4, r3
 800559c:	d117      	bne.n	80055ce <_puts_r+0x52>
 800559e:	686c      	ldr	r4, [r5, #4]
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	071b      	lsls	r3, r3, #28
 80055a4:	d51d      	bpl.n	80055e2 <_puts_r+0x66>
 80055a6:	6923      	ldr	r3, [r4, #16]
 80055a8:	b1db      	cbz	r3, 80055e2 <_puts_r+0x66>
 80055aa:	3e01      	subs	r6, #1
 80055ac:	68a3      	ldr	r3, [r4, #8]
 80055ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055b2:	3b01      	subs	r3, #1
 80055b4:	60a3      	str	r3, [r4, #8]
 80055b6:	b9e9      	cbnz	r1, 80055f4 <_puts_r+0x78>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	da2e      	bge.n	800561a <_puts_r+0x9e>
 80055bc:	4622      	mov	r2, r4
 80055be:	210a      	movs	r1, #10
 80055c0:	4628      	mov	r0, r5
 80055c2:	f000 f83f 	bl	8005644 <__swbuf_r>
 80055c6:	3001      	adds	r0, #1
 80055c8:	d011      	beq.n	80055ee <_puts_r+0x72>
 80055ca:	200a      	movs	r0, #10
 80055cc:	e011      	b.n	80055f2 <_puts_r+0x76>
 80055ce:	4b17      	ldr	r3, [pc, #92]	; (800562c <_puts_r+0xb0>)
 80055d0:	429c      	cmp	r4, r3
 80055d2:	d101      	bne.n	80055d8 <_puts_r+0x5c>
 80055d4:	68ac      	ldr	r4, [r5, #8]
 80055d6:	e7e3      	b.n	80055a0 <_puts_r+0x24>
 80055d8:	4b15      	ldr	r3, [pc, #84]	; (8005630 <_puts_r+0xb4>)
 80055da:	429c      	cmp	r4, r3
 80055dc:	bf08      	it	eq
 80055de:	68ec      	ldreq	r4, [r5, #12]
 80055e0:	e7de      	b.n	80055a0 <_puts_r+0x24>
 80055e2:	4621      	mov	r1, r4
 80055e4:	4628      	mov	r0, r5
 80055e6:	f000 f87f 	bl	80056e8 <__swsetup_r>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d0dd      	beq.n	80055aa <_puts_r+0x2e>
 80055ee:	f04f 30ff 	mov.w	r0, #4294967295
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	da04      	bge.n	8005602 <_puts_r+0x86>
 80055f8:	69a2      	ldr	r2, [r4, #24]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	dc06      	bgt.n	800560c <_puts_r+0x90>
 80055fe:	290a      	cmp	r1, #10
 8005600:	d004      	beq.n	800560c <_puts_r+0x90>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	6022      	str	r2, [r4, #0]
 8005608:	7019      	strb	r1, [r3, #0]
 800560a:	e7cf      	b.n	80055ac <_puts_r+0x30>
 800560c:	4622      	mov	r2, r4
 800560e:	4628      	mov	r0, r5
 8005610:	f000 f818 	bl	8005644 <__swbuf_r>
 8005614:	3001      	adds	r0, #1
 8005616:	d1c9      	bne.n	80055ac <_puts_r+0x30>
 8005618:	e7e9      	b.n	80055ee <_puts_r+0x72>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	200a      	movs	r0, #10
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	6022      	str	r2, [r4, #0]
 8005622:	7018      	strb	r0, [r3, #0]
 8005624:	e7e5      	b.n	80055f2 <_puts_r+0x76>
 8005626:	bf00      	nop
 8005628:	080066e0 	.word	0x080066e0
 800562c:	08006700 	.word	0x08006700
 8005630:	080066c0 	.word	0x080066c0

08005634 <puts>:
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <puts+0xc>)
 8005636:	4601      	mov	r1, r0
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	f7ff bf9f 	b.w	800557c <_puts_r>
 800563e:	bf00      	nop
 8005640:	20000018 	.word	0x20000018

08005644 <__swbuf_r>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	460e      	mov	r6, r1
 8005648:	4614      	mov	r4, r2
 800564a:	4605      	mov	r5, r0
 800564c:	b118      	cbz	r0, 8005656 <__swbuf_r+0x12>
 800564e:	6983      	ldr	r3, [r0, #24]
 8005650:	b90b      	cbnz	r3, 8005656 <__swbuf_r+0x12>
 8005652:	f000 f9a7 	bl	80059a4 <__sinit>
 8005656:	4b21      	ldr	r3, [pc, #132]	; (80056dc <__swbuf_r+0x98>)
 8005658:	429c      	cmp	r4, r3
 800565a:	d12a      	bne.n	80056b2 <__swbuf_r+0x6e>
 800565c:	686c      	ldr	r4, [r5, #4]
 800565e:	69a3      	ldr	r3, [r4, #24]
 8005660:	60a3      	str	r3, [r4, #8]
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	071a      	lsls	r2, r3, #28
 8005666:	d52e      	bpl.n	80056c6 <__swbuf_r+0x82>
 8005668:	6923      	ldr	r3, [r4, #16]
 800566a:	b363      	cbz	r3, 80056c6 <__swbuf_r+0x82>
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	6820      	ldr	r0, [r4, #0]
 8005670:	1ac0      	subs	r0, r0, r3
 8005672:	6963      	ldr	r3, [r4, #20]
 8005674:	b2f6      	uxtb	r6, r6
 8005676:	4283      	cmp	r3, r0
 8005678:	4637      	mov	r7, r6
 800567a:	dc04      	bgt.n	8005686 <__swbuf_r+0x42>
 800567c:	4621      	mov	r1, r4
 800567e:	4628      	mov	r0, r5
 8005680:	f000 f926 	bl	80058d0 <_fflush_r>
 8005684:	bb28      	cbnz	r0, 80056d2 <__swbuf_r+0x8e>
 8005686:	68a3      	ldr	r3, [r4, #8]
 8005688:	3b01      	subs	r3, #1
 800568a:	60a3      	str	r3, [r4, #8]
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	6022      	str	r2, [r4, #0]
 8005692:	701e      	strb	r6, [r3, #0]
 8005694:	6963      	ldr	r3, [r4, #20]
 8005696:	3001      	adds	r0, #1
 8005698:	4283      	cmp	r3, r0
 800569a:	d004      	beq.n	80056a6 <__swbuf_r+0x62>
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	07db      	lsls	r3, r3, #31
 80056a0:	d519      	bpl.n	80056d6 <__swbuf_r+0x92>
 80056a2:	2e0a      	cmp	r6, #10
 80056a4:	d117      	bne.n	80056d6 <__swbuf_r+0x92>
 80056a6:	4621      	mov	r1, r4
 80056a8:	4628      	mov	r0, r5
 80056aa:	f000 f911 	bl	80058d0 <_fflush_r>
 80056ae:	b190      	cbz	r0, 80056d6 <__swbuf_r+0x92>
 80056b0:	e00f      	b.n	80056d2 <__swbuf_r+0x8e>
 80056b2:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <__swbuf_r+0x9c>)
 80056b4:	429c      	cmp	r4, r3
 80056b6:	d101      	bne.n	80056bc <__swbuf_r+0x78>
 80056b8:	68ac      	ldr	r4, [r5, #8]
 80056ba:	e7d0      	b.n	800565e <__swbuf_r+0x1a>
 80056bc:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <__swbuf_r+0xa0>)
 80056be:	429c      	cmp	r4, r3
 80056c0:	bf08      	it	eq
 80056c2:	68ec      	ldreq	r4, [r5, #12]
 80056c4:	e7cb      	b.n	800565e <__swbuf_r+0x1a>
 80056c6:	4621      	mov	r1, r4
 80056c8:	4628      	mov	r0, r5
 80056ca:	f000 f80d 	bl	80056e8 <__swsetup_r>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d0cc      	beq.n	800566c <__swbuf_r+0x28>
 80056d2:	f04f 37ff 	mov.w	r7, #4294967295
 80056d6:	4638      	mov	r0, r7
 80056d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056da:	bf00      	nop
 80056dc:	080066e0 	.word	0x080066e0
 80056e0:	08006700 	.word	0x08006700
 80056e4:	080066c0 	.word	0x080066c0

080056e8 <__swsetup_r>:
 80056e8:	4b32      	ldr	r3, [pc, #200]	; (80057b4 <__swsetup_r+0xcc>)
 80056ea:	b570      	push	{r4, r5, r6, lr}
 80056ec:	681d      	ldr	r5, [r3, #0]
 80056ee:	4606      	mov	r6, r0
 80056f0:	460c      	mov	r4, r1
 80056f2:	b125      	cbz	r5, 80056fe <__swsetup_r+0x16>
 80056f4:	69ab      	ldr	r3, [r5, #24]
 80056f6:	b913      	cbnz	r3, 80056fe <__swsetup_r+0x16>
 80056f8:	4628      	mov	r0, r5
 80056fa:	f000 f953 	bl	80059a4 <__sinit>
 80056fe:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <__swsetup_r+0xd0>)
 8005700:	429c      	cmp	r4, r3
 8005702:	d10f      	bne.n	8005724 <__swsetup_r+0x3c>
 8005704:	686c      	ldr	r4, [r5, #4]
 8005706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570a:	b29a      	uxth	r2, r3
 800570c:	0715      	lsls	r5, r2, #28
 800570e:	d42c      	bmi.n	800576a <__swsetup_r+0x82>
 8005710:	06d0      	lsls	r0, r2, #27
 8005712:	d411      	bmi.n	8005738 <__swsetup_r+0x50>
 8005714:	2209      	movs	r2, #9
 8005716:	6032      	str	r2, [r6, #0]
 8005718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800571c:	81a3      	strh	r3, [r4, #12]
 800571e:	f04f 30ff 	mov.w	r0, #4294967295
 8005722:	e03e      	b.n	80057a2 <__swsetup_r+0xba>
 8005724:	4b25      	ldr	r3, [pc, #148]	; (80057bc <__swsetup_r+0xd4>)
 8005726:	429c      	cmp	r4, r3
 8005728:	d101      	bne.n	800572e <__swsetup_r+0x46>
 800572a:	68ac      	ldr	r4, [r5, #8]
 800572c:	e7eb      	b.n	8005706 <__swsetup_r+0x1e>
 800572e:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <__swsetup_r+0xd8>)
 8005730:	429c      	cmp	r4, r3
 8005732:	bf08      	it	eq
 8005734:	68ec      	ldreq	r4, [r5, #12]
 8005736:	e7e6      	b.n	8005706 <__swsetup_r+0x1e>
 8005738:	0751      	lsls	r1, r2, #29
 800573a:	d512      	bpl.n	8005762 <__swsetup_r+0x7a>
 800573c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800573e:	b141      	cbz	r1, 8005752 <__swsetup_r+0x6a>
 8005740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005744:	4299      	cmp	r1, r3
 8005746:	d002      	beq.n	800574e <__swsetup_r+0x66>
 8005748:	4630      	mov	r0, r6
 800574a:	f000 fa19 	bl	8005b80 <_free_r>
 800574e:	2300      	movs	r3, #0
 8005750:	6363      	str	r3, [r4, #52]	; 0x34
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	2300      	movs	r3, #0
 800575c:	6063      	str	r3, [r4, #4]
 800575e:	6923      	ldr	r3, [r4, #16]
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	f043 0308 	orr.w	r3, r3, #8
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	6923      	ldr	r3, [r4, #16]
 800576c:	b94b      	cbnz	r3, 8005782 <__swsetup_r+0x9a>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005778:	d003      	beq.n	8005782 <__swsetup_r+0x9a>
 800577a:	4621      	mov	r1, r4
 800577c:	4630      	mov	r0, r6
 800577e:	f000 f9bf 	bl	8005b00 <__smakebuf_r>
 8005782:	89a2      	ldrh	r2, [r4, #12]
 8005784:	f012 0301 	ands.w	r3, r2, #1
 8005788:	d00c      	beq.n	80057a4 <__swsetup_r+0xbc>
 800578a:	2300      	movs	r3, #0
 800578c:	60a3      	str	r3, [r4, #8]
 800578e:	6963      	ldr	r3, [r4, #20]
 8005790:	425b      	negs	r3, r3
 8005792:	61a3      	str	r3, [r4, #24]
 8005794:	6923      	ldr	r3, [r4, #16]
 8005796:	b953      	cbnz	r3, 80057ae <__swsetup_r+0xc6>
 8005798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800579c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80057a0:	d1ba      	bne.n	8005718 <__swsetup_r+0x30>
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	0792      	lsls	r2, r2, #30
 80057a6:	bf58      	it	pl
 80057a8:	6963      	ldrpl	r3, [r4, #20]
 80057aa:	60a3      	str	r3, [r4, #8]
 80057ac:	e7f2      	b.n	8005794 <__swsetup_r+0xac>
 80057ae:	2000      	movs	r0, #0
 80057b0:	e7f7      	b.n	80057a2 <__swsetup_r+0xba>
 80057b2:	bf00      	nop
 80057b4:	20000018 	.word	0x20000018
 80057b8:	080066e0 	.word	0x080066e0
 80057bc:	08006700 	.word	0x08006700
 80057c0:	080066c0 	.word	0x080066c0

080057c4 <__sflush_r>:
 80057c4:	898a      	ldrh	r2, [r1, #12]
 80057c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ca:	4605      	mov	r5, r0
 80057cc:	0710      	lsls	r0, r2, #28
 80057ce:	460c      	mov	r4, r1
 80057d0:	d458      	bmi.n	8005884 <__sflush_r+0xc0>
 80057d2:	684b      	ldr	r3, [r1, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	dc05      	bgt.n	80057e4 <__sflush_r+0x20>
 80057d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	dc02      	bgt.n	80057e4 <__sflush_r+0x20>
 80057de:	2000      	movs	r0, #0
 80057e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057e6:	2e00      	cmp	r6, #0
 80057e8:	d0f9      	beq.n	80057de <__sflush_r+0x1a>
 80057ea:	2300      	movs	r3, #0
 80057ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057f0:	682f      	ldr	r7, [r5, #0]
 80057f2:	6a21      	ldr	r1, [r4, #32]
 80057f4:	602b      	str	r3, [r5, #0]
 80057f6:	d032      	beq.n	800585e <__sflush_r+0x9a>
 80057f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	075a      	lsls	r2, r3, #29
 80057fe:	d505      	bpl.n	800580c <__sflush_r+0x48>
 8005800:	6863      	ldr	r3, [r4, #4]
 8005802:	1ac0      	subs	r0, r0, r3
 8005804:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005806:	b10b      	cbz	r3, 800580c <__sflush_r+0x48>
 8005808:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800580a:	1ac0      	subs	r0, r0, r3
 800580c:	2300      	movs	r3, #0
 800580e:	4602      	mov	r2, r0
 8005810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005812:	6a21      	ldr	r1, [r4, #32]
 8005814:	4628      	mov	r0, r5
 8005816:	47b0      	blx	r6
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	89a3      	ldrh	r3, [r4, #12]
 800581c:	d106      	bne.n	800582c <__sflush_r+0x68>
 800581e:	6829      	ldr	r1, [r5, #0]
 8005820:	291d      	cmp	r1, #29
 8005822:	d848      	bhi.n	80058b6 <__sflush_r+0xf2>
 8005824:	4a29      	ldr	r2, [pc, #164]	; (80058cc <__sflush_r+0x108>)
 8005826:	40ca      	lsrs	r2, r1
 8005828:	07d6      	lsls	r6, r2, #31
 800582a:	d544      	bpl.n	80058b6 <__sflush_r+0xf2>
 800582c:	2200      	movs	r2, #0
 800582e:	6062      	str	r2, [r4, #4]
 8005830:	04d9      	lsls	r1, r3, #19
 8005832:	6922      	ldr	r2, [r4, #16]
 8005834:	6022      	str	r2, [r4, #0]
 8005836:	d504      	bpl.n	8005842 <__sflush_r+0x7e>
 8005838:	1c42      	adds	r2, r0, #1
 800583a:	d101      	bne.n	8005840 <__sflush_r+0x7c>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b903      	cbnz	r3, 8005842 <__sflush_r+0x7e>
 8005840:	6560      	str	r0, [r4, #84]	; 0x54
 8005842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005844:	602f      	str	r7, [r5, #0]
 8005846:	2900      	cmp	r1, #0
 8005848:	d0c9      	beq.n	80057de <__sflush_r+0x1a>
 800584a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800584e:	4299      	cmp	r1, r3
 8005850:	d002      	beq.n	8005858 <__sflush_r+0x94>
 8005852:	4628      	mov	r0, r5
 8005854:	f000 f994 	bl	8005b80 <_free_r>
 8005858:	2000      	movs	r0, #0
 800585a:	6360      	str	r0, [r4, #52]	; 0x34
 800585c:	e7c0      	b.n	80057e0 <__sflush_r+0x1c>
 800585e:	2301      	movs	r3, #1
 8005860:	4628      	mov	r0, r5
 8005862:	47b0      	blx	r6
 8005864:	1c41      	adds	r1, r0, #1
 8005866:	d1c8      	bne.n	80057fa <__sflush_r+0x36>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0c5      	beq.n	80057fa <__sflush_r+0x36>
 800586e:	2b1d      	cmp	r3, #29
 8005870:	d001      	beq.n	8005876 <__sflush_r+0xb2>
 8005872:	2b16      	cmp	r3, #22
 8005874:	d101      	bne.n	800587a <__sflush_r+0xb6>
 8005876:	602f      	str	r7, [r5, #0]
 8005878:	e7b1      	b.n	80057de <__sflush_r+0x1a>
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	e7ad      	b.n	80057e0 <__sflush_r+0x1c>
 8005884:	690f      	ldr	r7, [r1, #16]
 8005886:	2f00      	cmp	r7, #0
 8005888:	d0a9      	beq.n	80057de <__sflush_r+0x1a>
 800588a:	0793      	lsls	r3, r2, #30
 800588c:	680e      	ldr	r6, [r1, #0]
 800588e:	bf08      	it	eq
 8005890:	694b      	ldreq	r3, [r1, #20]
 8005892:	600f      	str	r7, [r1, #0]
 8005894:	bf18      	it	ne
 8005896:	2300      	movne	r3, #0
 8005898:	eba6 0807 	sub.w	r8, r6, r7
 800589c:	608b      	str	r3, [r1, #8]
 800589e:	f1b8 0f00 	cmp.w	r8, #0
 80058a2:	dd9c      	ble.n	80057de <__sflush_r+0x1a>
 80058a4:	4643      	mov	r3, r8
 80058a6:	463a      	mov	r2, r7
 80058a8:	6a21      	ldr	r1, [r4, #32]
 80058aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058ac:	4628      	mov	r0, r5
 80058ae:	47b0      	blx	r6
 80058b0:	2800      	cmp	r0, #0
 80058b2:	dc06      	bgt.n	80058c2 <__sflush_r+0xfe>
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ba:	81a3      	strh	r3, [r4, #12]
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295
 80058c0:	e78e      	b.n	80057e0 <__sflush_r+0x1c>
 80058c2:	4407      	add	r7, r0
 80058c4:	eba8 0800 	sub.w	r8, r8, r0
 80058c8:	e7e9      	b.n	800589e <__sflush_r+0xda>
 80058ca:	bf00      	nop
 80058cc:	20400001 	.word	0x20400001

080058d0 <_fflush_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	690b      	ldr	r3, [r1, #16]
 80058d4:	4605      	mov	r5, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	b1db      	cbz	r3, 8005912 <_fflush_r+0x42>
 80058da:	b118      	cbz	r0, 80058e4 <_fflush_r+0x14>
 80058dc:	6983      	ldr	r3, [r0, #24]
 80058de:	b90b      	cbnz	r3, 80058e4 <_fflush_r+0x14>
 80058e0:	f000 f860 	bl	80059a4 <__sinit>
 80058e4:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <_fflush_r+0x48>)
 80058e6:	429c      	cmp	r4, r3
 80058e8:	d109      	bne.n	80058fe <_fflush_r+0x2e>
 80058ea:	686c      	ldr	r4, [r5, #4]
 80058ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f0:	b17b      	cbz	r3, 8005912 <_fflush_r+0x42>
 80058f2:	4621      	mov	r1, r4
 80058f4:	4628      	mov	r0, r5
 80058f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058fa:	f7ff bf63 	b.w	80057c4 <__sflush_r>
 80058fe:	4b07      	ldr	r3, [pc, #28]	; (800591c <_fflush_r+0x4c>)
 8005900:	429c      	cmp	r4, r3
 8005902:	d101      	bne.n	8005908 <_fflush_r+0x38>
 8005904:	68ac      	ldr	r4, [r5, #8]
 8005906:	e7f1      	b.n	80058ec <_fflush_r+0x1c>
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <_fflush_r+0x50>)
 800590a:	429c      	cmp	r4, r3
 800590c:	bf08      	it	eq
 800590e:	68ec      	ldreq	r4, [r5, #12]
 8005910:	e7ec      	b.n	80058ec <_fflush_r+0x1c>
 8005912:	2000      	movs	r0, #0
 8005914:	bd38      	pop	{r3, r4, r5, pc}
 8005916:	bf00      	nop
 8005918:	080066e0 	.word	0x080066e0
 800591c:	08006700 	.word	0x08006700
 8005920:	080066c0 	.word	0x080066c0

08005924 <std>:
 8005924:	2300      	movs	r3, #0
 8005926:	b510      	push	{r4, lr}
 8005928:	4604      	mov	r4, r0
 800592a:	e9c0 3300 	strd	r3, r3, [r0]
 800592e:	6083      	str	r3, [r0, #8]
 8005930:	8181      	strh	r1, [r0, #12]
 8005932:	6643      	str	r3, [r0, #100]	; 0x64
 8005934:	81c2      	strh	r2, [r0, #14]
 8005936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800593a:	6183      	str	r3, [r0, #24]
 800593c:	4619      	mov	r1, r3
 800593e:	2208      	movs	r2, #8
 8005940:	305c      	adds	r0, #92	; 0x5c
 8005942:	f7ff fdfb 	bl	800553c <memset>
 8005946:	4b05      	ldr	r3, [pc, #20]	; (800595c <std+0x38>)
 8005948:	6263      	str	r3, [r4, #36]	; 0x24
 800594a:	4b05      	ldr	r3, [pc, #20]	; (8005960 <std+0x3c>)
 800594c:	62a3      	str	r3, [r4, #40]	; 0x28
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <std+0x40>)
 8005950:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <std+0x44>)
 8005954:	6224      	str	r4, [r4, #32]
 8005956:	6323      	str	r3, [r4, #48]	; 0x30
 8005958:	bd10      	pop	{r4, pc}
 800595a:	bf00      	nop
 800595c:	08006281 	.word	0x08006281
 8005960:	080062a3 	.word	0x080062a3
 8005964:	080062db 	.word	0x080062db
 8005968:	080062ff 	.word	0x080062ff

0800596c <_cleanup_r>:
 800596c:	4901      	ldr	r1, [pc, #4]	; (8005974 <_cleanup_r+0x8>)
 800596e:	f000 b885 	b.w	8005a7c <_fwalk_reent>
 8005972:	bf00      	nop
 8005974:	080058d1 	.word	0x080058d1

08005978 <__sfmoreglue>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	1e4a      	subs	r2, r1, #1
 800597c:	2568      	movs	r5, #104	; 0x68
 800597e:	4355      	muls	r5, r2
 8005980:	460e      	mov	r6, r1
 8005982:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005986:	f000 f949 	bl	8005c1c <_malloc_r>
 800598a:	4604      	mov	r4, r0
 800598c:	b140      	cbz	r0, 80059a0 <__sfmoreglue+0x28>
 800598e:	2100      	movs	r1, #0
 8005990:	e9c0 1600 	strd	r1, r6, [r0]
 8005994:	300c      	adds	r0, #12
 8005996:	60a0      	str	r0, [r4, #8]
 8005998:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800599c:	f7ff fdce 	bl	800553c <memset>
 80059a0:	4620      	mov	r0, r4
 80059a2:	bd70      	pop	{r4, r5, r6, pc}

080059a4 <__sinit>:
 80059a4:	6983      	ldr	r3, [r0, #24]
 80059a6:	b510      	push	{r4, lr}
 80059a8:	4604      	mov	r4, r0
 80059aa:	bb33      	cbnz	r3, 80059fa <__sinit+0x56>
 80059ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80059b0:	6503      	str	r3, [r0, #80]	; 0x50
 80059b2:	4b12      	ldr	r3, [pc, #72]	; (80059fc <__sinit+0x58>)
 80059b4:	4a12      	ldr	r2, [pc, #72]	; (8005a00 <__sinit+0x5c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6282      	str	r2, [r0, #40]	; 0x28
 80059ba:	4298      	cmp	r0, r3
 80059bc:	bf04      	itt	eq
 80059be:	2301      	moveq	r3, #1
 80059c0:	6183      	streq	r3, [r0, #24]
 80059c2:	f000 f81f 	bl	8005a04 <__sfp>
 80059c6:	6060      	str	r0, [r4, #4]
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 f81b 	bl	8005a04 <__sfp>
 80059ce:	60a0      	str	r0, [r4, #8]
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 f817 	bl	8005a04 <__sfp>
 80059d6:	2200      	movs	r2, #0
 80059d8:	60e0      	str	r0, [r4, #12]
 80059da:	2104      	movs	r1, #4
 80059dc:	6860      	ldr	r0, [r4, #4]
 80059de:	f7ff ffa1 	bl	8005924 <std>
 80059e2:	2201      	movs	r2, #1
 80059e4:	2109      	movs	r1, #9
 80059e6:	68a0      	ldr	r0, [r4, #8]
 80059e8:	f7ff ff9c 	bl	8005924 <std>
 80059ec:	2202      	movs	r2, #2
 80059ee:	2112      	movs	r1, #18
 80059f0:	68e0      	ldr	r0, [r4, #12]
 80059f2:	f7ff ff97 	bl	8005924 <std>
 80059f6:	2301      	movs	r3, #1
 80059f8:	61a3      	str	r3, [r4, #24]
 80059fa:	bd10      	pop	{r4, pc}
 80059fc:	080066bc 	.word	0x080066bc
 8005a00:	0800596d 	.word	0x0800596d

08005a04 <__sfp>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <__sfp+0x70>)
 8005a08:	681e      	ldr	r6, [r3, #0]
 8005a0a:	69b3      	ldr	r3, [r6, #24]
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	b913      	cbnz	r3, 8005a16 <__sfp+0x12>
 8005a10:	4630      	mov	r0, r6
 8005a12:	f7ff ffc7 	bl	80059a4 <__sinit>
 8005a16:	3648      	adds	r6, #72	; 0x48
 8005a18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	d503      	bpl.n	8005a28 <__sfp+0x24>
 8005a20:	6833      	ldr	r3, [r6, #0]
 8005a22:	b133      	cbz	r3, 8005a32 <__sfp+0x2e>
 8005a24:	6836      	ldr	r6, [r6, #0]
 8005a26:	e7f7      	b.n	8005a18 <__sfp+0x14>
 8005a28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a2c:	b16d      	cbz	r5, 8005a4a <__sfp+0x46>
 8005a2e:	3468      	adds	r4, #104	; 0x68
 8005a30:	e7f4      	b.n	8005a1c <__sfp+0x18>
 8005a32:	2104      	movs	r1, #4
 8005a34:	4638      	mov	r0, r7
 8005a36:	f7ff ff9f 	bl	8005978 <__sfmoreglue>
 8005a3a:	6030      	str	r0, [r6, #0]
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d1f1      	bne.n	8005a24 <__sfp+0x20>
 8005a40:	230c      	movs	r3, #12
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	4604      	mov	r4, r0
 8005a46:	4620      	mov	r0, r4
 8005a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a4a:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <__sfp+0x74>)
 8005a4c:	6665      	str	r5, [r4, #100]	; 0x64
 8005a4e:	e9c4 5500 	strd	r5, r5, [r4]
 8005a52:	60a5      	str	r5, [r4, #8]
 8005a54:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005a58:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	4629      	mov	r1, r5
 8005a60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a64:	f7ff fd6a 	bl	800553c <memset>
 8005a68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a70:	e7e9      	b.n	8005a46 <__sfp+0x42>
 8005a72:	bf00      	nop
 8005a74:	080066bc 	.word	0x080066bc
 8005a78:	ffff0001 	.word	0xffff0001

08005a7c <_fwalk_reent>:
 8005a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a80:	4680      	mov	r8, r0
 8005a82:	4689      	mov	r9, r1
 8005a84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a88:	2600      	movs	r6, #0
 8005a8a:	b914      	cbnz	r4, 8005a92 <_fwalk_reent+0x16>
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a92:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005a96:	3f01      	subs	r7, #1
 8005a98:	d501      	bpl.n	8005a9e <_fwalk_reent+0x22>
 8005a9a:	6824      	ldr	r4, [r4, #0]
 8005a9c:	e7f5      	b.n	8005a8a <_fwalk_reent+0xe>
 8005a9e:	89ab      	ldrh	r3, [r5, #12]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d907      	bls.n	8005ab4 <_fwalk_reent+0x38>
 8005aa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	d003      	beq.n	8005ab4 <_fwalk_reent+0x38>
 8005aac:	4629      	mov	r1, r5
 8005aae:	4640      	mov	r0, r8
 8005ab0:	47c8      	blx	r9
 8005ab2:	4306      	orrs	r6, r0
 8005ab4:	3568      	adds	r5, #104	; 0x68
 8005ab6:	e7ee      	b.n	8005a96 <_fwalk_reent+0x1a>

08005ab8 <__swhatbuf_r>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	460e      	mov	r6, r1
 8005abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	b096      	sub	sp, #88	; 0x58
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	461d      	mov	r5, r3
 8005ac8:	da07      	bge.n	8005ada <__swhatbuf_r+0x22>
 8005aca:	2300      	movs	r3, #0
 8005acc:	602b      	str	r3, [r5, #0]
 8005ace:	89b3      	ldrh	r3, [r6, #12]
 8005ad0:	061a      	lsls	r2, r3, #24
 8005ad2:	d410      	bmi.n	8005af6 <__swhatbuf_r+0x3e>
 8005ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ad8:	e00e      	b.n	8005af8 <__swhatbuf_r+0x40>
 8005ada:	466a      	mov	r2, sp
 8005adc:	f000 fc36 	bl	800634c <_fstat_r>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	dbf2      	blt.n	8005aca <__swhatbuf_r+0x12>
 8005ae4:	9a01      	ldr	r2, [sp, #4]
 8005ae6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005aea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005aee:	425a      	negs	r2, r3
 8005af0:	415a      	adcs	r2, r3
 8005af2:	602a      	str	r2, [r5, #0]
 8005af4:	e7ee      	b.n	8005ad4 <__swhatbuf_r+0x1c>
 8005af6:	2340      	movs	r3, #64	; 0x40
 8005af8:	2000      	movs	r0, #0
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	b016      	add	sp, #88	; 0x58
 8005afe:	bd70      	pop	{r4, r5, r6, pc}

08005b00 <__smakebuf_r>:
 8005b00:	898b      	ldrh	r3, [r1, #12]
 8005b02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b04:	079d      	lsls	r5, r3, #30
 8005b06:	4606      	mov	r6, r0
 8005b08:	460c      	mov	r4, r1
 8005b0a:	d507      	bpl.n	8005b1c <__smakebuf_r+0x1c>
 8005b0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	2301      	movs	r3, #1
 8005b16:	6163      	str	r3, [r4, #20]
 8005b18:	b002      	add	sp, #8
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
 8005b1c:	ab01      	add	r3, sp, #4
 8005b1e:	466a      	mov	r2, sp
 8005b20:	f7ff ffca 	bl	8005ab8 <__swhatbuf_r>
 8005b24:	9900      	ldr	r1, [sp, #0]
 8005b26:	4605      	mov	r5, r0
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f000 f877 	bl	8005c1c <_malloc_r>
 8005b2e:	b948      	cbnz	r0, 8005b44 <__smakebuf_r+0x44>
 8005b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b34:	059a      	lsls	r2, r3, #22
 8005b36:	d4ef      	bmi.n	8005b18 <__smakebuf_r+0x18>
 8005b38:	f023 0303 	bic.w	r3, r3, #3
 8005b3c:	f043 0302 	orr.w	r3, r3, #2
 8005b40:	81a3      	strh	r3, [r4, #12]
 8005b42:	e7e3      	b.n	8005b0c <__smakebuf_r+0xc>
 8005b44:	4b0d      	ldr	r3, [pc, #52]	; (8005b7c <__smakebuf_r+0x7c>)
 8005b46:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	6020      	str	r0, [r4, #0]
 8005b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b50:	81a3      	strh	r3, [r4, #12]
 8005b52:	9b00      	ldr	r3, [sp, #0]
 8005b54:	6163      	str	r3, [r4, #20]
 8005b56:	9b01      	ldr	r3, [sp, #4]
 8005b58:	6120      	str	r0, [r4, #16]
 8005b5a:	b15b      	cbz	r3, 8005b74 <__smakebuf_r+0x74>
 8005b5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b60:	4630      	mov	r0, r6
 8005b62:	f000 fc05 	bl	8006370 <_isatty_r>
 8005b66:	b128      	cbz	r0, 8005b74 <__smakebuf_r+0x74>
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	f043 0301 	orr.w	r3, r3, #1
 8005b72:	81a3      	strh	r3, [r4, #12]
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	431d      	orrs	r5, r3
 8005b78:	81a5      	strh	r5, [r4, #12]
 8005b7a:	e7cd      	b.n	8005b18 <__smakebuf_r+0x18>
 8005b7c:	0800596d 	.word	0x0800596d

08005b80 <_free_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4605      	mov	r5, r0
 8005b84:	2900      	cmp	r1, #0
 8005b86:	d045      	beq.n	8005c14 <_free_r+0x94>
 8005b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8c:	1f0c      	subs	r4, r1, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bfb8      	it	lt
 8005b92:	18e4      	addlt	r4, r4, r3
 8005b94:	f000 fc0e 	bl	80063b4 <__malloc_lock>
 8005b98:	4a1f      	ldr	r2, [pc, #124]	; (8005c18 <_free_r+0x98>)
 8005b9a:	6813      	ldr	r3, [r2, #0]
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	b933      	cbnz	r3, 8005bae <_free_r+0x2e>
 8005ba0:	6063      	str	r3, [r4, #4]
 8005ba2:	6014      	str	r4, [r2, #0]
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005baa:	f000 bc04 	b.w	80063b6 <__malloc_unlock>
 8005bae:	42a3      	cmp	r3, r4
 8005bb0:	d90c      	bls.n	8005bcc <_free_r+0x4c>
 8005bb2:	6821      	ldr	r1, [r4, #0]
 8005bb4:	1862      	adds	r2, r4, r1
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	bf04      	itt	eq
 8005bba:	681a      	ldreq	r2, [r3, #0]
 8005bbc:	685b      	ldreq	r3, [r3, #4]
 8005bbe:	6063      	str	r3, [r4, #4]
 8005bc0:	bf04      	itt	eq
 8005bc2:	1852      	addeq	r2, r2, r1
 8005bc4:	6022      	streq	r2, [r4, #0]
 8005bc6:	6004      	str	r4, [r0, #0]
 8005bc8:	e7ec      	b.n	8005ba4 <_free_r+0x24>
 8005bca:	4613      	mov	r3, r2
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	b10a      	cbz	r2, 8005bd4 <_free_r+0x54>
 8005bd0:	42a2      	cmp	r2, r4
 8005bd2:	d9fa      	bls.n	8005bca <_free_r+0x4a>
 8005bd4:	6819      	ldr	r1, [r3, #0]
 8005bd6:	1858      	adds	r0, r3, r1
 8005bd8:	42a0      	cmp	r0, r4
 8005bda:	d10b      	bne.n	8005bf4 <_free_r+0x74>
 8005bdc:	6820      	ldr	r0, [r4, #0]
 8005bde:	4401      	add	r1, r0
 8005be0:	1858      	adds	r0, r3, r1
 8005be2:	4282      	cmp	r2, r0
 8005be4:	6019      	str	r1, [r3, #0]
 8005be6:	d1dd      	bne.n	8005ba4 <_free_r+0x24>
 8005be8:	6810      	ldr	r0, [r2, #0]
 8005bea:	6852      	ldr	r2, [r2, #4]
 8005bec:	605a      	str	r2, [r3, #4]
 8005bee:	4401      	add	r1, r0
 8005bf0:	6019      	str	r1, [r3, #0]
 8005bf2:	e7d7      	b.n	8005ba4 <_free_r+0x24>
 8005bf4:	d902      	bls.n	8005bfc <_free_r+0x7c>
 8005bf6:	230c      	movs	r3, #12
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	e7d3      	b.n	8005ba4 <_free_r+0x24>
 8005bfc:	6820      	ldr	r0, [r4, #0]
 8005bfe:	1821      	adds	r1, r4, r0
 8005c00:	428a      	cmp	r2, r1
 8005c02:	bf04      	itt	eq
 8005c04:	6811      	ldreq	r1, [r2, #0]
 8005c06:	6852      	ldreq	r2, [r2, #4]
 8005c08:	6062      	str	r2, [r4, #4]
 8005c0a:	bf04      	itt	eq
 8005c0c:	1809      	addeq	r1, r1, r0
 8005c0e:	6021      	streq	r1, [r4, #0]
 8005c10:	605c      	str	r4, [r3, #4]
 8005c12:	e7c7      	b.n	8005ba4 <_free_r+0x24>
 8005c14:	bd38      	pop	{r3, r4, r5, pc}
 8005c16:	bf00      	nop
 8005c18:	200000a0 	.word	0x200000a0

08005c1c <_malloc_r>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	1ccd      	adds	r5, r1, #3
 8005c20:	f025 0503 	bic.w	r5, r5, #3
 8005c24:	3508      	adds	r5, #8
 8005c26:	2d0c      	cmp	r5, #12
 8005c28:	bf38      	it	cc
 8005c2a:	250c      	movcc	r5, #12
 8005c2c:	2d00      	cmp	r5, #0
 8005c2e:	4606      	mov	r6, r0
 8005c30:	db01      	blt.n	8005c36 <_malloc_r+0x1a>
 8005c32:	42a9      	cmp	r1, r5
 8005c34:	d903      	bls.n	8005c3e <_malloc_r+0x22>
 8005c36:	230c      	movs	r3, #12
 8005c38:	6033      	str	r3, [r6, #0]
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	bd70      	pop	{r4, r5, r6, pc}
 8005c3e:	f000 fbb9 	bl	80063b4 <__malloc_lock>
 8005c42:	4a21      	ldr	r2, [pc, #132]	; (8005cc8 <_malloc_r+0xac>)
 8005c44:	6814      	ldr	r4, [r2, #0]
 8005c46:	4621      	mov	r1, r4
 8005c48:	b991      	cbnz	r1, 8005c70 <_malloc_r+0x54>
 8005c4a:	4c20      	ldr	r4, [pc, #128]	; (8005ccc <_malloc_r+0xb0>)
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	b91b      	cbnz	r3, 8005c58 <_malloc_r+0x3c>
 8005c50:	4630      	mov	r0, r6
 8005c52:	f000 fb05 	bl	8006260 <_sbrk_r>
 8005c56:	6020      	str	r0, [r4, #0]
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f000 fb00 	bl	8006260 <_sbrk_r>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d124      	bne.n	8005cae <_malloc_r+0x92>
 8005c64:	230c      	movs	r3, #12
 8005c66:	6033      	str	r3, [r6, #0]
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f000 fba4 	bl	80063b6 <__malloc_unlock>
 8005c6e:	e7e4      	b.n	8005c3a <_malloc_r+0x1e>
 8005c70:	680b      	ldr	r3, [r1, #0]
 8005c72:	1b5b      	subs	r3, r3, r5
 8005c74:	d418      	bmi.n	8005ca8 <_malloc_r+0x8c>
 8005c76:	2b0b      	cmp	r3, #11
 8005c78:	d90f      	bls.n	8005c9a <_malloc_r+0x7e>
 8005c7a:	600b      	str	r3, [r1, #0]
 8005c7c:	50cd      	str	r5, [r1, r3]
 8005c7e:	18cc      	adds	r4, r1, r3
 8005c80:	4630      	mov	r0, r6
 8005c82:	f000 fb98 	bl	80063b6 <__malloc_unlock>
 8005c86:	f104 000b 	add.w	r0, r4, #11
 8005c8a:	1d23      	adds	r3, r4, #4
 8005c8c:	f020 0007 	bic.w	r0, r0, #7
 8005c90:	1ac3      	subs	r3, r0, r3
 8005c92:	d0d3      	beq.n	8005c3c <_malloc_r+0x20>
 8005c94:	425a      	negs	r2, r3
 8005c96:	50e2      	str	r2, [r4, r3]
 8005c98:	e7d0      	b.n	8005c3c <_malloc_r+0x20>
 8005c9a:	428c      	cmp	r4, r1
 8005c9c:	684b      	ldr	r3, [r1, #4]
 8005c9e:	bf16      	itet	ne
 8005ca0:	6063      	strne	r3, [r4, #4]
 8005ca2:	6013      	streq	r3, [r2, #0]
 8005ca4:	460c      	movne	r4, r1
 8005ca6:	e7eb      	b.n	8005c80 <_malloc_r+0x64>
 8005ca8:	460c      	mov	r4, r1
 8005caa:	6849      	ldr	r1, [r1, #4]
 8005cac:	e7cc      	b.n	8005c48 <_malloc_r+0x2c>
 8005cae:	1cc4      	adds	r4, r0, #3
 8005cb0:	f024 0403 	bic.w	r4, r4, #3
 8005cb4:	42a0      	cmp	r0, r4
 8005cb6:	d005      	beq.n	8005cc4 <_malloc_r+0xa8>
 8005cb8:	1a21      	subs	r1, r4, r0
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f000 fad0 	bl	8006260 <_sbrk_r>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d0cf      	beq.n	8005c64 <_malloc_r+0x48>
 8005cc4:	6025      	str	r5, [r4, #0]
 8005cc6:	e7db      	b.n	8005c80 <_malloc_r+0x64>
 8005cc8:	200000a0 	.word	0x200000a0
 8005ccc:	200000a4 	.word	0x200000a4

08005cd0 <__sfputc_r>:
 8005cd0:	6893      	ldr	r3, [r2, #8]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	b410      	push	{r4}
 8005cd8:	6093      	str	r3, [r2, #8]
 8005cda:	da08      	bge.n	8005cee <__sfputc_r+0x1e>
 8005cdc:	6994      	ldr	r4, [r2, #24]
 8005cde:	42a3      	cmp	r3, r4
 8005ce0:	db01      	blt.n	8005ce6 <__sfputc_r+0x16>
 8005ce2:	290a      	cmp	r1, #10
 8005ce4:	d103      	bne.n	8005cee <__sfputc_r+0x1e>
 8005ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cea:	f7ff bcab 	b.w	8005644 <__swbuf_r>
 8005cee:	6813      	ldr	r3, [r2, #0]
 8005cf0:	1c58      	adds	r0, r3, #1
 8005cf2:	6010      	str	r0, [r2, #0]
 8005cf4:	7019      	strb	r1, [r3, #0]
 8005cf6:	4608      	mov	r0, r1
 8005cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <__sfputs_r>:
 8005cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d00:	4606      	mov	r6, r0
 8005d02:	460f      	mov	r7, r1
 8005d04:	4614      	mov	r4, r2
 8005d06:	18d5      	adds	r5, r2, r3
 8005d08:	42ac      	cmp	r4, r5
 8005d0a:	d101      	bne.n	8005d10 <__sfputs_r+0x12>
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	e007      	b.n	8005d20 <__sfputs_r+0x22>
 8005d10:	463a      	mov	r2, r7
 8005d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d16:	4630      	mov	r0, r6
 8005d18:	f7ff ffda 	bl	8005cd0 <__sfputc_r>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d1f3      	bne.n	8005d08 <__sfputs_r+0xa>
 8005d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d24 <_vfiprintf_r>:
 8005d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d28:	460c      	mov	r4, r1
 8005d2a:	b09d      	sub	sp, #116	; 0x74
 8005d2c:	4617      	mov	r7, r2
 8005d2e:	461d      	mov	r5, r3
 8005d30:	4606      	mov	r6, r0
 8005d32:	b118      	cbz	r0, 8005d3c <_vfiprintf_r+0x18>
 8005d34:	6983      	ldr	r3, [r0, #24]
 8005d36:	b90b      	cbnz	r3, 8005d3c <_vfiprintf_r+0x18>
 8005d38:	f7ff fe34 	bl	80059a4 <__sinit>
 8005d3c:	4b7c      	ldr	r3, [pc, #496]	; (8005f30 <_vfiprintf_r+0x20c>)
 8005d3e:	429c      	cmp	r4, r3
 8005d40:	d158      	bne.n	8005df4 <_vfiprintf_r+0xd0>
 8005d42:	6874      	ldr	r4, [r6, #4]
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	0718      	lsls	r0, r3, #28
 8005d48:	d55e      	bpl.n	8005e08 <_vfiprintf_r+0xe4>
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d05b      	beq.n	8005e08 <_vfiprintf_r+0xe4>
 8005d50:	2300      	movs	r3, #0
 8005d52:	9309      	str	r3, [sp, #36]	; 0x24
 8005d54:	2320      	movs	r3, #32
 8005d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d5a:	2330      	movs	r3, #48	; 0x30
 8005d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d60:	9503      	str	r5, [sp, #12]
 8005d62:	f04f 0b01 	mov.w	fp, #1
 8005d66:	46b8      	mov	r8, r7
 8005d68:	4645      	mov	r5, r8
 8005d6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d6e:	b10b      	cbz	r3, 8005d74 <_vfiprintf_r+0x50>
 8005d70:	2b25      	cmp	r3, #37	; 0x25
 8005d72:	d154      	bne.n	8005e1e <_vfiprintf_r+0xfa>
 8005d74:	ebb8 0a07 	subs.w	sl, r8, r7
 8005d78:	d00b      	beq.n	8005d92 <_vfiprintf_r+0x6e>
 8005d7a:	4653      	mov	r3, sl
 8005d7c:	463a      	mov	r2, r7
 8005d7e:	4621      	mov	r1, r4
 8005d80:	4630      	mov	r0, r6
 8005d82:	f7ff ffbc 	bl	8005cfe <__sfputs_r>
 8005d86:	3001      	adds	r0, #1
 8005d88:	f000 80c2 	beq.w	8005f10 <_vfiprintf_r+0x1ec>
 8005d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8e:	4453      	add	r3, sl
 8005d90:	9309      	str	r3, [sp, #36]	; 0x24
 8005d92:	f898 3000 	ldrb.w	r3, [r8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80ba 	beq.w	8005f10 <_vfiprintf_r+0x1ec>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005da6:	9304      	str	r3, [sp, #16]
 8005da8:	9307      	str	r3, [sp, #28]
 8005daa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dae:	931a      	str	r3, [sp, #104]	; 0x68
 8005db0:	46a8      	mov	r8, r5
 8005db2:	2205      	movs	r2, #5
 8005db4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005db8:	485e      	ldr	r0, [pc, #376]	; (8005f34 <_vfiprintf_r+0x210>)
 8005dba:	f7fa fa11 	bl	80001e0 <memchr>
 8005dbe:	9b04      	ldr	r3, [sp, #16]
 8005dc0:	bb78      	cbnz	r0, 8005e22 <_vfiprintf_r+0xfe>
 8005dc2:	06d9      	lsls	r1, r3, #27
 8005dc4:	bf44      	itt	mi
 8005dc6:	2220      	movmi	r2, #32
 8005dc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dcc:	071a      	lsls	r2, r3, #28
 8005dce:	bf44      	itt	mi
 8005dd0:	222b      	movmi	r2, #43	; 0x2b
 8005dd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dd6:	782a      	ldrb	r2, [r5, #0]
 8005dd8:	2a2a      	cmp	r2, #42	; 0x2a
 8005dda:	d02a      	beq.n	8005e32 <_vfiprintf_r+0x10e>
 8005ddc:	9a07      	ldr	r2, [sp, #28]
 8005dde:	46a8      	mov	r8, r5
 8005de0:	2000      	movs	r0, #0
 8005de2:	250a      	movs	r5, #10
 8005de4:	4641      	mov	r1, r8
 8005de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dea:	3b30      	subs	r3, #48	; 0x30
 8005dec:	2b09      	cmp	r3, #9
 8005dee:	d969      	bls.n	8005ec4 <_vfiprintf_r+0x1a0>
 8005df0:	b360      	cbz	r0, 8005e4c <_vfiprintf_r+0x128>
 8005df2:	e024      	b.n	8005e3e <_vfiprintf_r+0x11a>
 8005df4:	4b50      	ldr	r3, [pc, #320]	; (8005f38 <_vfiprintf_r+0x214>)
 8005df6:	429c      	cmp	r4, r3
 8005df8:	d101      	bne.n	8005dfe <_vfiprintf_r+0xda>
 8005dfa:	68b4      	ldr	r4, [r6, #8]
 8005dfc:	e7a2      	b.n	8005d44 <_vfiprintf_r+0x20>
 8005dfe:	4b4f      	ldr	r3, [pc, #316]	; (8005f3c <_vfiprintf_r+0x218>)
 8005e00:	429c      	cmp	r4, r3
 8005e02:	bf08      	it	eq
 8005e04:	68f4      	ldreq	r4, [r6, #12]
 8005e06:	e79d      	b.n	8005d44 <_vfiprintf_r+0x20>
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff fc6c 	bl	80056e8 <__swsetup_r>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d09d      	beq.n	8005d50 <_vfiprintf_r+0x2c>
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295
 8005e18:	b01d      	add	sp, #116	; 0x74
 8005e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1e:	46a8      	mov	r8, r5
 8005e20:	e7a2      	b.n	8005d68 <_vfiprintf_r+0x44>
 8005e22:	4a44      	ldr	r2, [pc, #272]	; (8005f34 <_vfiprintf_r+0x210>)
 8005e24:	1a80      	subs	r0, r0, r2
 8005e26:	fa0b f000 	lsl.w	r0, fp, r0
 8005e2a:	4318      	orrs	r0, r3
 8005e2c:	9004      	str	r0, [sp, #16]
 8005e2e:	4645      	mov	r5, r8
 8005e30:	e7be      	b.n	8005db0 <_vfiprintf_r+0x8c>
 8005e32:	9a03      	ldr	r2, [sp, #12]
 8005e34:	1d11      	adds	r1, r2, #4
 8005e36:	6812      	ldr	r2, [r2, #0]
 8005e38:	9103      	str	r1, [sp, #12]
 8005e3a:	2a00      	cmp	r2, #0
 8005e3c:	db01      	blt.n	8005e42 <_vfiprintf_r+0x11e>
 8005e3e:	9207      	str	r2, [sp, #28]
 8005e40:	e004      	b.n	8005e4c <_vfiprintf_r+0x128>
 8005e42:	4252      	negs	r2, r2
 8005e44:	f043 0302 	orr.w	r3, r3, #2
 8005e48:	9207      	str	r2, [sp, #28]
 8005e4a:	9304      	str	r3, [sp, #16]
 8005e4c:	f898 3000 	ldrb.w	r3, [r8]
 8005e50:	2b2e      	cmp	r3, #46	; 0x2e
 8005e52:	d10e      	bne.n	8005e72 <_vfiprintf_r+0x14e>
 8005e54:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005e58:	2b2a      	cmp	r3, #42	; 0x2a
 8005e5a:	d138      	bne.n	8005ece <_vfiprintf_r+0x1aa>
 8005e5c:	9b03      	ldr	r3, [sp, #12]
 8005e5e:	1d1a      	adds	r2, r3, #4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	9203      	str	r2, [sp, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bfb8      	it	lt
 8005e68:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e6c:	f108 0802 	add.w	r8, r8, #2
 8005e70:	9305      	str	r3, [sp, #20]
 8005e72:	4d33      	ldr	r5, [pc, #204]	; (8005f40 <_vfiprintf_r+0x21c>)
 8005e74:	f898 1000 	ldrb.w	r1, [r8]
 8005e78:	2203      	movs	r2, #3
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f7fa f9b0 	bl	80001e0 <memchr>
 8005e80:	b140      	cbz	r0, 8005e94 <_vfiprintf_r+0x170>
 8005e82:	2340      	movs	r3, #64	; 0x40
 8005e84:	1b40      	subs	r0, r0, r5
 8005e86:	fa03 f000 	lsl.w	r0, r3, r0
 8005e8a:	9b04      	ldr	r3, [sp, #16]
 8005e8c:	4303      	orrs	r3, r0
 8005e8e:	f108 0801 	add.w	r8, r8, #1
 8005e92:	9304      	str	r3, [sp, #16]
 8005e94:	f898 1000 	ldrb.w	r1, [r8]
 8005e98:	482a      	ldr	r0, [pc, #168]	; (8005f44 <_vfiprintf_r+0x220>)
 8005e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e9e:	2206      	movs	r2, #6
 8005ea0:	f108 0701 	add.w	r7, r8, #1
 8005ea4:	f7fa f99c 	bl	80001e0 <memchr>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d037      	beq.n	8005f1c <_vfiprintf_r+0x1f8>
 8005eac:	4b26      	ldr	r3, [pc, #152]	; (8005f48 <_vfiprintf_r+0x224>)
 8005eae:	bb1b      	cbnz	r3, 8005ef8 <_vfiprintf_r+0x1d4>
 8005eb0:	9b03      	ldr	r3, [sp, #12]
 8005eb2:	3307      	adds	r3, #7
 8005eb4:	f023 0307 	bic.w	r3, r3, #7
 8005eb8:	3308      	adds	r3, #8
 8005eba:	9303      	str	r3, [sp, #12]
 8005ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ebe:	444b      	add	r3, r9
 8005ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec2:	e750      	b.n	8005d66 <_vfiprintf_r+0x42>
 8005ec4:	fb05 3202 	mla	r2, r5, r2, r3
 8005ec8:	2001      	movs	r0, #1
 8005eca:	4688      	mov	r8, r1
 8005ecc:	e78a      	b.n	8005de4 <_vfiprintf_r+0xc0>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f108 0801 	add.w	r8, r8, #1
 8005ed4:	9305      	str	r3, [sp, #20]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	250a      	movs	r5, #10
 8005eda:	4640      	mov	r0, r8
 8005edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee0:	3a30      	subs	r2, #48	; 0x30
 8005ee2:	2a09      	cmp	r2, #9
 8005ee4:	d903      	bls.n	8005eee <_vfiprintf_r+0x1ca>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0c3      	beq.n	8005e72 <_vfiprintf_r+0x14e>
 8005eea:	9105      	str	r1, [sp, #20]
 8005eec:	e7c1      	b.n	8005e72 <_vfiprintf_r+0x14e>
 8005eee:	fb05 2101 	mla	r1, r5, r1, r2
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4680      	mov	r8, r0
 8005ef6:	e7f0      	b.n	8005eda <_vfiprintf_r+0x1b6>
 8005ef8:	ab03      	add	r3, sp, #12
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	4622      	mov	r2, r4
 8005efe:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <_vfiprintf_r+0x228>)
 8005f00:	a904      	add	r1, sp, #16
 8005f02:	4630      	mov	r0, r6
 8005f04:	f3af 8000 	nop.w
 8005f08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f0c:	4681      	mov	r9, r0
 8005f0e:	d1d5      	bne.n	8005ebc <_vfiprintf_r+0x198>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	065b      	lsls	r3, r3, #25
 8005f14:	f53f af7e 	bmi.w	8005e14 <_vfiprintf_r+0xf0>
 8005f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f1a:	e77d      	b.n	8005e18 <_vfiprintf_r+0xf4>
 8005f1c:	ab03      	add	r3, sp, #12
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	4622      	mov	r2, r4
 8005f22:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <_vfiprintf_r+0x228>)
 8005f24:	a904      	add	r1, sp, #16
 8005f26:	4630      	mov	r0, r6
 8005f28:	f000 f888 	bl	800603c <_printf_i>
 8005f2c:	e7ec      	b.n	8005f08 <_vfiprintf_r+0x1e4>
 8005f2e:	bf00      	nop
 8005f30:	080066e0 	.word	0x080066e0
 8005f34:	08006720 	.word	0x08006720
 8005f38:	08006700 	.word	0x08006700
 8005f3c:	080066c0 	.word	0x080066c0
 8005f40:	08006726 	.word	0x08006726
 8005f44:	0800672a 	.word	0x0800672a
 8005f48:	00000000 	.word	0x00000000
 8005f4c:	08005cff 	.word	0x08005cff

08005f50 <_printf_common>:
 8005f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f54:	4691      	mov	r9, r2
 8005f56:	461f      	mov	r7, r3
 8005f58:	688a      	ldr	r2, [r1, #8]
 8005f5a:	690b      	ldr	r3, [r1, #16]
 8005f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f60:	4293      	cmp	r3, r2
 8005f62:	bfb8      	it	lt
 8005f64:	4613      	movlt	r3, r2
 8005f66:	f8c9 3000 	str.w	r3, [r9]
 8005f6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f6e:	4606      	mov	r6, r0
 8005f70:	460c      	mov	r4, r1
 8005f72:	b112      	cbz	r2, 8005f7a <_printf_common+0x2a>
 8005f74:	3301      	adds	r3, #1
 8005f76:	f8c9 3000 	str.w	r3, [r9]
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	0699      	lsls	r1, r3, #26
 8005f7e:	bf42      	ittt	mi
 8005f80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f84:	3302      	addmi	r3, #2
 8005f86:	f8c9 3000 	strmi.w	r3, [r9]
 8005f8a:	6825      	ldr	r5, [r4, #0]
 8005f8c:	f015 0506 	ands.w	r5, r5, #6
 8005f90:	d107      	bne.n	8005fa2 <_printf_common+0x52>
 8005f92:	f104 0a19 	add.w	sl, r4, #25
 8005f96:	68e3      	ldr	r3, [r4, #12]
 8005f98:	f8d9 2000 	ldr.w	r2, [r9]
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	42ab      	cmp	r3, r5
 8005fa0:	dc28      	bgt.n	8005ff4 <_printf_common+0xa4>
 8005fa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005fa6:	6822      	ldr	r2, [r4, #0]
 8005fa8:	3300      	adds	r3, #0
 8005faa:	bf18      	it	ne
 8005fac:	2301      	movne	r3, #1
 8005fae:	0692      	lsls	r2, r2, #26
 8005fb0:	d42d      	bmi.n	800600e <_printf_common+0xbe>
 8005fb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fb6:	4639      	mov	r1, r7
 8005fb8:	4630      	mov	r0, r6
 8005fba:	47c0      	blx	r8
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d020      	beq.n	8006002 <_printf_common+0xb2>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	68e5      	ldr	r5, [r4, #12]
 8005fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8005fc8:	f003 0306 	and.w	r3, r3, #6
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	bf08      	it	eq
 8005fd0:	1aad      	subeq	r5, r5, r2
 8005fd2:	68a3      	ldr	r3, [r4, #8]
 8005fd4:	6922      	ldr	r2, [r4, #16]
 8005fd6:	bf0c      	ite	eq
 8005fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fdc:	2500      	movne	r5, #0
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	bfc4      	itt	gt
 8005fe2:	1a9b      	subgt	r3, r3, r2
 8005fe4:	18ed      	addgt	r5, r5, r3
 8005fe6:	f04f 0900 	mov.w	r9, #0
 8005fea:	341a      	adds	r4, #26
 8005fec:	454d      	cmp	r5, r9
 8005fee:	d11a      	bne.n	8006026 <_printf_common+0xd6>
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	e008      	b.n	8006006 <_printf_common+0xb6>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4652      	mov	r2, sl
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	47c0      	blx	r8
 8005ffe:	3001      	adds	r0, #1
 8006000:	d103      	bne.n	800600a <_printf_common+0xba>
 8006002:	f04f 30ff 	mov.w	r0, #4294967295
 8006006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800600a:	3501      	adds	r5, #1
 800600c:	e7c3      	b.n	8005f96 <_printf_common+0x46>
 800600e:	18e1      	adds	r1, r4, r3
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	2030      	movs	r0, #48	; 0x30
 8006014:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006018:	4422      	add	r2, r4
 800601a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800601e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006022:	3302      	adds	r3, #2
 8006024:	e7c5      	b.n	8005fb2 <_printf_common+0x62>
 8006026:	2301      	movs	r3, #1
 8006028:	4622      	mov	r2, r4
 800602a:	4639      	mov	r1, r7
 800602c:	4630      	mov	r0, r6
 800602e:	47c0      	blx	r8
 8006030:	3001      	adds	r0, #1
 8006032:	d0e6      	beq.n	8006002 <_printf_common+0xb2>
 8006034:	f109 0901 	add.w	r9, r9, #1
 8006038:	e7d8      	b.n	8005fec <_printf_common+0x9c>
	...

0800603c <_printf_i>:
 800603c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006040:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006044:	460c      	mov	r4, r1
 8006046:	7e09      	ldrb	r1, [r1, #24]
 8006048:	b085      	sub	sp, #20
 800604a:	296e      	cmp	r1, #110	; 0x6e
 800604c:	4617      	mov	r7, r2
 800604e:	4606      	mov	r6, r0
 8006050:	4698      	mov	r8, r3
 8006052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006054:	f000 80b3 	beq.w	80061be <_printf_i+0x182>
 8006058:	d822      	bhi.n	80060a0 <_printf_i+0x64>
 800605a:	2963      	cmp	r1, #99	; 0x63
 800605c:	d036      	beq.n	80060cc <_printf_i+0x90>
 800605e:	d80a      	bhi.n	8006076 <_printf_i+0x3a>
 8006060:	2900      	cmp	r1, #0
 8006062:	f000 80b9 	beq.w	80061d8 <_printf_i+0x19c>
 8006066:	2958      	cmp	r1, #88	; 0x58
 8006068:	f000 8083 	beq.w	8006172 <_printf_i+0x136>
 800606c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006070:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006074:	e032      	b.n	80060dc <_printf_i+0xa0>
 8006076:	2964      	cmp	r1, #100	; 0x64
 8006078:	d001      	beq.n	800607e <_printf_i+0x42>
 800607a:	2969      	cmp	r1, #105	; 0x69
 800607c:	d1f6      	bne.n	800606c <_printf_i+0x30>
 800607e:	6820      	ldr	r0, [r4, #0]
 8006080:	6813      	ldr	r3, [r2, #0]
 8006082:	0605      	lsls	r5, r0, #24
 8006084:	f103 0104 	add.w	r1, r3, #4
 8006088:	d52a      	bpl.n	80060e0 <_printf_i+0xa4>
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6011      	str	r1, [r2, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	da03      	bge.n	800609a <_printf_i+0x5e>
 8006092:	222d      	movs	r2, #45	; 0x2d
 8006094:	425b      	negs	r3, r3
 8006096:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800609a:	486f      	ldr	r0, [pc, #444]	; (8006258 <_printf_i+0x21c>)
 800609c:	220a      	movs	r2, #10
 800609e:	e039      	b.n	8006114 <_printf_i+0xd8>
 80060a0:	2973      	cmp	r1, #115	; 0x73
 80060a2:	f000 809d 	beq.w	80061e0 <_printf_i+0x1a4>
 80060a6:	d808      	bhi.n	80060ba <_printf_i+0x7e>
 80060a8:	296f      	cmp	r1, #111	; 0x6f
 80060aa:	d020      	beq.n	80060ee <_printf_i+0xb2>
 80060ac:	2970      	cmp	r1, #112	; 0x70
 80060ae:	d1dd      	bne.n	800606c <_printf_i+0x30>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	f043 0320 	orr.w	r3, r3, #32
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	e003      	b.n	80060c2 <_printf_i+0x86>
 80060ba:	2975      	cmp	r1, #117	; 0x75
 80060bc:	d017      	beq.n	80060ee <_printf_i+0xb2>
 80060be:	2978      	cmp	r1, #120	; 0x78
 80060c0:	d1d4      	bne.n	800606c <_printf_i+0x30>
 80060c2:	2378      	movs	r3, #120	; 0x78
 80060c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060c8:	4864      	ldr	r0, [pc, #400]	; (800625c <_printf_i+0x220>)
 80060ca:	e055      	b.n	8006178 <_printf_i+0x13c>
 80060cc:	6813      	ldr	r3, [r2, #0]
 80060ce:	1d19      	adds	r1, r3, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6011      	str	r1, [r2, #0]
 80060d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060dc:	2301      	movs	r3, #1
 80060de:	e08c      	b.n	80061fa <_printf_i+0x1be>
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6011      	str	r1, [r2, #0]
 80060e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060e8:	bf18      	it	ne
 80060ea:	b21b      	sxthne	r3, r3
 80060ec:	e7cf      	b.n	800608e <_printf_i+0x52>
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	6825      	ldr	r5, [r4, #0]
 80060f2:	1d18      	adds	r0, r3, #4
 80060f4:	6010      	str	r0, [r2, #0]
 80060f6:	0628      	lsls	r0, r5, #24
 80060f8:	d501      	bpl.n	80060fe <_printf_i+0xc2>
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	e002      	b.n	8006104 <_printf_i+0xc8>
 80060fe:	0668      	lsls	r0, r5, #25
 8006100:	d5fb      	bpl.n	80060fa <_printf_i+0xbe>
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	4854      	ldr	r0, [pc, #336]	; (8006258 <_printf_i+0x21c>)
 8006106:	296f      	cmp	r1, #111	; 0x6f
 8006108:	bf14      	ite	ne
 800610a:	220a      	movne	r2, #10
 800610c:	2208      	moveq	r2, #8
 800610e:	2100      	movs	r1, #0
 8006110:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006114:	6865      	ldr	r5, [r4, #4]
 8006116:	60a5      	str	r5, [r4, #8]
 8006118:	2d00      	cmp	r5, #0
 800611a:	f2c0 8095 	blt.w	8006248 <_printf_i+0x20c>
 800611e:	6821      	ldr	r1, [r4, #0]
 8006120:	f021 0104 	bic.w	r1, r1, #4
 8006124:	6021      	str	r1, [r4, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d13d      	bne.n	80061a6 <_printf_i+0x16a>
 800612a:	2d00      	cmp	r5, #0
 800612c:	f040 808e 	bne.w	800624c <_printf_i+0x210>
 8006130:	4665      	mov	r5, ip
 8006132:	2a08      	cmp	r2, #8
 8006134:	d10b      	bne.n	800614e <_printf_i+0x112>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	07db      	lsls	r3, r3, #31
 800613a:	d508      	bpl.n	800614e <_printf_i+0x112>
 800613c:	6923      	ldr	r3, [r4, #16]
 800613e:	6862      	ldr	r2, [r4, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	bfde      	ittt	le
 8006144:	2330      	movle	r3, #48	; 0x30
 8006146:	f805 3c01 	strble.w	r3, [r5, #-1]
 800614a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800614e:	ebac 0305 	sub.w	r3, ip, r5
 8006152:	6123      	str	r3, [r4, #16]
 8006154:	f8cd 8000 	str.w	r8, [sp]
 8006158:	463b      	mov	r3, r7
 800615a:	aa03      	add	r2, sp, #12
 800615c:	4621      	mov	r1, r4
 800615e:	4630      	mov	r0, r6
 8006160:	f7ff fef6 	bl	8005f50 <_printf_common>
 8006164:	3001      	adds	r0, #1
 8006166:	d14d      	bne.n	8006204 <_printf_i+0x1c8>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	b005      	add	sp, #20
 800616e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006172:	4839      	ldr	r0, [pc, #228]	; (8006258 <_printf_i+0x21c>)
 8006174:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006178:	6813      	ldr	r3, [r2, #0]
 800617a:	6821      	ldr	r1, [r4, #0]
 800617c:	1d1d      	adds	r5, r3, #4
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6015      	str	r5, [r2, #0]
 8006182:	060a      	lsls	r2, r1, #24
 8006184:	d50b      	bpl.n	800619e <_printf_i+0x162>
 8006186:	07ca      	lsls	r2, r1, #31
 8006188:	bf44      	itt	mi
 800618a:	f041 0120 	orrmi.w	r1, r1, #32
 800618e:	6021      	strmi	r1, [r4, #0]
 8006190:	b91b      	cbnz	r3, 800619a <_printf_i+0x15e>
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	f022 0220 	bic.w	r2, r2, #32
 8006198:	6022      	str	r2, [r4, #0]
 800619a:	2210      	movs	r2, #16
 800619c:	e7b7      	b.n	800610e <_printf_i+0xd2>
 800619e:	064d      	lsls	r5, r1, #25
 80061a0:	bf48      	it	mi
 80061a2:	b29b      	uxthmi	r3, r3
 80061a4:	e7ef      	b.n	8006186 <_printf_i+0x14a>
 80061a6:	4665      	mov	r5, ip
 80061a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80061ac:	fb02 3311 	mls	r3, r2, r1, r3
 80061b0:	5cc3      	ldrb	r3, [r0, r3]
 80061b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80061b6:	460b      	mov	r3, r1
 80061b8:	2900      	cmp	r1, #0
 80061ba:	d1f5      	bne.n	80061a8 <_printf_i+0x16c>
 80061bc:	e7b9      	b.n	8006132 <_printf_i+0xf6>
 80061be:	6813      	ldr	r3, [r2, #0]
 80061c0:	6825      	ldr	r5, [r4, #0]
 80061c2:	6961      	ldr	r1, [r4, #20]
 80061c4:	1d18      	adds	r0, r3, #4
 80061c6:	6010      	str	r0, [r2, #0]
 80061c8:	0628      	lsls	r0, r5, #24
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	d501      	bpl.n	80061d2 <_printf_i+0x196>
 80061ce:	6019      	str	r1, [r3, #0]
 80061d0:	e002      	b.n	80061d8 <_printf_i+0x19c>
 80061d2:	066a      	lsls	r2, r5, #25
 80061d4:	d5fb      	bpl.n	80061ce <_printf_i+0x192>
 80061d6:	8019      	strh	r1, [r3, #0]
 80061d8:	2300      	movs	r3, #0
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	4665      	mov	r5, ip
 80061de:	e7b9      	b.n	8006154 <_printf_i+0x118>
 80061e0:	6813      	ldr	r3, [r2, #0]
 80061e2:	1d19      	adds	r1, r3, #4
 80061e4:	6011      	str	r1, [r2, #0]
 80061e6:	681d      	ldr	r5, [r3, #0]
 80061e8:	6862      	ldr	r2, [r4, #4]
 80061ea:	2100      	movs	r1, #0
 80061ec:	4628      	mov	r0, r5
 80061ee:	f7f9 fff7 	bl	80001e0 <memchr>
 80061f2:	b108      	cbz	r0, 80061f8 <_printf_i+0x1bc>
 80061f4:	1b40      	subs	r0, r0, r5
 80061f6:	6060      	str	r0, [r4, #4]
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	6123      	str	r3, [r4, #16]
 80061fc:	2300      	movs	r3, #0
 80061fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006202:	e7a7      	b.n	8006154 <_printf_i+0x118>
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	462a      	mov	r2, r5
 8006208:	4639      	mov	r1, r7
 800620a:	4630      	mov	r0, r6
 800620c:	47c0      	blx	r8
 800620e:	3001      	adds	r0, #1
 8006210:	d0aa      	beq.n	8006168 <_printf_i+0x12c>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	079b      	lsls	r3, r3, #30
 8006216:	d413      	bmi.n	8006240 <_printf_i+0x204>
 8006218:	68e0      	ldr	r0, [r4, #12]
 800621a:	9b03      	ldr	r3, [sp, #12]
 800621c:	4298      	cmp	r0, r3
 800621e:	bfb8      	it	lt
 8006220:	4618      	movlt	r0, r3
 8006222:	e7a3      	b.n	800616c <_printf_i+0x130>
 8006224:	2301      	movs	r3, #1
 8006226:	464a      	mov	r2, r9
 8006228:	4639      	mov	r1, r7
 800622a:	4630      	mov	r0, r6
 800622c:	47c0      	blx	r8
 800622e:	3001      	adds	r0, #1
 8006230:	d09a      	beq.n	8006168 <_printf_i+0x12c>
 8006232:	3501      	adds	r5, #1
 8006234:	68e3      	ldr	r3, [r4, #12]
 8006236:	9a03      	ldr	r2, [sp, #12]
 8006238:	1a9b      	subs	r3, r3, r2
 800623a:	42ab      	cmp	r3, r5
 800623c:	dcf2      	bgt.n	8006224 <_printf_i+0x1e8>
 800623e:	e7eb      	b.n	8006218 <_printf_i+0x1dc>
 8006240:	2500      	movs	r5, #0
 8006242:	f104 0919 	add.w	r9, r4, #25
 8006246:	e7f5      	b.n	8006234 <_printf_i+0x1f8>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1ac      	bne.n	80061a6 <_printf_i+0x16a>
 800624c:	7803      	ldrb	r3, [r0, #0]
 800624e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006252:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006256:	e76c      	b.n	8006132 <_printf_i+0xf6>
 8006258:	08006731 	.word	0x08006731
 800625c:	08006742 	.word	0x08006742

08006260 <_sbrk_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4c06      	ldr	r4, [pc, #24]	; (800627c <_sbrk_r+0x1c>)
 8006264:	2300      	movs	r3, #0
 8006266:	4605      	mov	r5, r0
 8006268:	4608      	mov	r0, r1
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	f7fb fadc 	bl	8001828 <_sbrk>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d102      	bne.n	800627a <_sbrk_r+0x1a>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	b103      	cbz	r3, 800627a <_sbrk_r+0x1a>
 8006278:	602b      	str	r3, [r5, #0]
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	200033c4 	.word	0x200033c4

08006280 <__sread>:
 8006280:	b510      	push	{r4, lr}
 8006282:	460c      	mov	r4, r1
 8006284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006288:	f000 f896 	bl	80063b8 <_read_r>
 800628c:	2800      	cmp	r0, #0
 800628e:	bfab      	itete	ge
 8006290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006292:	89a3      	ldrhlt	r3, [r4, #12]
 8006294:	181b      	addge	r3, r3, r0
 8006296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800629a:	bfac      	ite	ge
 800629c:	6563      	strge	r3, [r4, #84]	; 0x54
 800629e:	81a3      	strhlt	r3, [r4, #12]
 80062a0:	bd10      	pop	{r4, pc}

080062a2 <__swrite>:
 80062a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a6:	461f      	mov	r7, r3
 80062a8:	898b      	ldrh	r3, [r1, #12]
 80062aa:	05db      	lsls	r3, r3, #23
 80062ac:	4605      	mov	r5, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	4616      	mov	r6, r2
 80062b2:	d505      	bpl.n	80062c0 <__swrite+0x1e>
 80062b4:	2302      	movs	r3, #2
 80062b6:	2200      	movs	r2, #0
 80062b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062bc:	f000 f868 	bl	8006390 <_lseek_r>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	4632      	mov	r2, r6
 80062ce:	463b      	mov	r3, r7
 80062d0:	4628      	mov	r0, r5
 80062d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062d6:	f000 b817 	b.w	8006308 <_write_r>

080062da <__sseek>:
 80062da:	b510      	push	{r4, lr}
 80062dc:	460c      	mov	r4, r1
 80062de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e2:	f000 f855 	bl	8006390 <_lseek_r>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	89a3      	ldrh	r3, [r4, #12]
 80062ea:	bf15      	itete	ne
 80062ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80062ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062f6:	81a3      	strheq	r3, [r4, #12]
 80062f8:	bf18      	it	ne
 80062fa:	81a3      	strhne	r3, [r4, #12]
 80062fc:	bd10      	pop	{r4, pc}

080062fe <__sclose>:
 80062fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006302:	f000 b813 	b.w	800632c <_close_r>
	...

08006308 <_write_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4c07      	ldr	r4, [pc, #28]	; (8006328 <_write_r+0x20>)
 800630c:	4605      	mov	r5, r0
 800630e:	4608      	mov	r0, r1
 8006310:	4611      	mov	r1, r2
 8006312:	2200      	movs	r2, #0
 8006314:	6022      	str	r2, [r4, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	f7fb fa35 	bl	8001786 <_write>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d102      	bne.n	8006326 <_write_r+0x1e>
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	b103      	cbz	r3, 8006326 <_write_r+0x1e>
 8006324:	602b      	str	r3, [r5, #0]
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	200033c4 	.word	0x200033c4

0800632c <_close_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4c06      	ldr	r4, [pc, #24]	; (8006348 <_close_r+0x1c>)
 8006330:	2300      	movs	r3, #0
 8006332:	4605      	mov	r5, r0
 8006334:	4608      	mov	r0, r1
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	f7fb fa41 	bl	80017be <_close>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d102      	bne.n	8006346 <_close_r+0x1a>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	b103      	cbz	r3, 8006346 <_close_r+0x1a>
 8006344:	602b      	str	r3, [r5, #0]
 8006346:	bd38      	pop	{r3, r4, r5, pc}
 8006348:	200033c4 	.word	0x200033c4

0800634c <_fstat_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4c07      	ldr	r4, [pc, #28]	; (800636c <_fstat_r+0x20>)
 8006350:	2300      	movs	r3, #0
 8006352:	4605      	mov	r5, r0
 8006354:	4608      	mov	r0, r1
 8006356:	4611      	mov	r1, r2
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	f7fb fa3c 	bl	80017d6 <_fstat>
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	d102      	bne.n	8006368 <_fstat_r+0x1c>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	b103      	cbz	r3, 8006368 <_fstat_r+0x1c>
 8006366:	602b      	str	r3, [r5, #0]
 8006368:	bd38      	pop	{r3, r4, r5, pc}
 800636a:	bf00      	nop
 800636c:	200033c4 	.word	0x200033c4

08006370 <_isatty_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4c06      	ldr	r4, [pc, #24]	; (800638c <_isatty_r+0x1c>)
 8006374:	2300      	movs	r3, #0
 8006376:	4605      	mov	r5, r0
 8006378:	4608      	mov	r0, r1
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	f7fb fa3b 	bl	80017f6 <_isatty>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_isatty_r+0x1a>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	b103      	cbz	r3, 800638a <_isatty_r+0x1a>
 8006388:	602b      	str	r3, [r5, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	200033c4 	.word	0x200033c4

08006390 <_lseek_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4c07      	ldr	r4, [pc, #28]	; (80063b0 <_lseek_r+0x20>)
 8006394:	4605      	mov	r5, r0
 8006396:	4608      	mov	r0, r1
 8006398:	4611      	mov	r1, r2
 800639a:	2200      	movs	r2, #0
 800639c:	6022      	str	r2, [r4, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f7fb fa34 	bl	800180c <_lseek>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_lseek_r+0x1e>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_lseek_r+0x1e>
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	200033c4 	.word	0x200033c4

080063b4 <__malloc_lock>:
 80063b4:	4770      	bx	lr

080063b6 <__malloc_unlock>:
 80063b6:	4770      	bx	lr

080063b8 <_read_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4c07      	ldr	r4, [pc, #28]	; (80063d8 <_read_r+0x20>)
 80063bc:	4605      	mov	r5, r0
 80063be:	4608      	mov	r0, r1
 80063c0:	4611      	mov	r1, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	6022      	str	r2, [r4, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f7fb f9c0 	bl	800174c <_read>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_read_r+0x1e>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_read_r+0x1e>
 80063d4:	602b      	str	r3, [r5, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	200033c4 	.word	0x200033c4

080063dc <sqrt>:
 80063dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063e0:	ed2d 8b02 	vpush	{d8}
 80063e4:	b08b      	sub	sp, #44	; 0x2c
 80063e6:	ec55 4b10 	vmov	r4, r5, d0
 80063ea:	f000 f851 	bl	8006490 <__ieee754_sqrt>
 80063ee:	4b26      	ldr	r3, [pc, #152]	; (8006488 <sqrt+0xac>)
 80063f0:	eeb0 8a40 	vmov.f32	s16, s0
 80063f4:	eef0 8a60 	vmov.f32	s17, s1
 80063f8:	f993 6000 	ldrsb.w	r6, [r3]
 80063fc:	1c73      	adds	r3, r6, #1
 80063fe:	d02a      	beq.n	8006456 <sqrt+0x7a>
 8006400:	4622      	mov	r2, r4
 8006402:	462b      	mov	r3, r5
 8006404:	4620      	mov	r0, r4
 8006406:	4629      	mov	r1, r5
 8006408:	f7fa fb90 	bl	8000b2c <__aeabi_dcmpun>
 800640c:	4607      	mov	r7, r0
 800640e:	bb10      	cbnz	r0, 8006456 <sqrt+0x7a>
 8006410:	f04f 0800 	mov.w	r8, #0
 8006414:	f04f 0900 	mov.w	r9, #0
 8006418:	4642      	mov	r2, r8
 800641a:	464b      	mov	r3, r9
 800641c:	4620      	mov	r0, r4
 800641e:	4629      	mov	r1, r5
 8006420:	f7fa fb5c 	bl	8000adc <__aeabi_dcmplt>
 8006424:	b1b8      	cbz	r0, 8006456 <sqrt+0x7a>
 8006426:	2301      	movs	r3, #1
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	4b18      	ldr	r3, [pc, #96]	; (800648c <sqrt+0xb0>)
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	9708      	str	r7, [sp, #32]
 8006430:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006434:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006438:	b9b6      	cbnz	r6, 8006468 <sqrt+0x8c>
 800643a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800643e:	4668      	mov	r0, sp
 8006440:	f000 f8d6 	bl	80065f0 <matherr>
 8006444:	b1d0      	cbz	r0, 800647c <sqrt+0xa0>
 8006446:	9b08      	ldr	r3, [sp, #32]
 8006448:	b11b      	cbz	r3, 8006452 <sqrt+0x76>
 800644a:	f7ff f84d 	bl	80054e8 <__errno>
 800644e:	9b08      	ldr	r3, [sp, #32]
 8006450:	6003      	str	r3, [r0, #0]
 8006452:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006456:	eeb0 0a48 	vmov.f32	s0, s16
 800645a:	eef0 0a68 	vmov.f32	s1, s17
 800645e:	b00b      	add	sp, #44	; 0x2c
 8006460:	ecbd 8b02 	vpop	{d8}
 8006464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006468:	4642      	mov	r2, r8
 800646a:	464b      	mov	r3, r9
 800646c:	4640      	mov	r0, r8
 800646e:	4649      	mov	r1, r9
 8006470:	f7fa f9ec 	bl	800084c <__aeabi_ddiv>
 8006474:	2e02      	cmp	r6, #2
 8006476:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800647a:	d1e0      	bne.n	800643e <sqrt+0x62>
 800647c:	f7ff f834 	bl	80054e8 <__errno>
 8006480:	2321      	movs	r3, #33	; 0x21
 8006482:	6003      	str	r3, [r0, #0]
 8006484:	e7df      	b.n	8006446 <sqrt+0x6a>
 8006486:	bf00      	nop
 8006488:	2000007c 	.word	0x2000007c
 800648c:	08006753 	.word	0x08006753

08006490 <__ieee754_sqrt>:
 8006490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006494:	4955      	ldr	r1, [pc, #340]	; (80065ec <__ieee754_sqrt+0x15c>)
 8006496:	ec55 4b10 	vmov	r4, r5, d0
 800649a:	43a9      	bics	r1, r5
 800649c:	462b      	mov	r3, r5
 800649e:	462a      	mov	r2, r5
 80064a0:	d112      	bne.n	80064c8 <__ieee754_sqrt+0x38>
 80064a2:	ee10 2a10 	vmov	r2, s0
 80064a6:	ee10 0a10 	vmov	r0, s0
 80064aa:	4629      	mov	r1, r5
 80064ac:	f7fa f8a4 	bl	80005f8 <__aeabi_dmul>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4620      	mov	r0, r4
 80064b6:	4629      	mov	r1, r5
 80064b8:	f7f9 fee8 	bl	800028c <__adddf3>
 80064bc:	4604      	mov	r4, r0
 80064be:	460d      	mov	r5, r1
 80064c0:	ec45 4b10 	vmov	d0, r4, r5
 80064c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c8:	2d00      	cmp	r5, #0
 80064ca:	ee10 0a10 	vmov	r0, s0
 80064ce:	4621      	mov	r1, r4
 80064d0:	dc0f      	bgt.n	80064f2 <__ieee754_sqrt+0x62>
 80064d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80064d6:	4330      	orrs	r0, r6
 80064d8:	d0f2      	beq.n	80064c0 <__ieee754_sqrt+0x30>
 80064da:	b155      	cbz	r5, 80064f2 <__ieee754_sqrt+0x62>
 80064dc:	ee10 2a10 	vmov	r2, s0
 80064e0:	4620      	mov	r0, r4
 80064e2:	4629      	mov	r1, r5
 80064e4:	f7f9 fed0 	bl	8000288 <__aeabi_dsub>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	f7fa f9ae 	bl	800084c <__aeabi_ddiv>
 80064f0:	e7e4      	b.n	80064bc <__ieee754_sqrt+0x2c>
 80064f2:	151b      	asrs	r3, r3, #20
 80064f4:	d073      	beq.n	80065de <__ieee754_sqrt+0x14e>
 80064f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80064fa:	07dd      	lsls	r5, r3, #31
 80064fc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006500:	bf48      	it	mi
 8006502:	0fc8      	lsrmi	r0, r1, #31
 8006504:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006508:	bf44      	itt	mi
 800650a:	0049      	lslmi	r1, r1, #1
 800650c:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006510:	2500      	movs	r5, #0
 8006512:	1058      	asrs	r0, r3, #1
 8006514:	0fcb      	lsrs	r3, r1, #31
 8006516:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800651a:	0049      	lsls	r1, r1, #1
 800651c:	2316      	movs	r3, #22
 800651e:	462c      	mov	r4, r5
 8006520:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006524:	19a7      	adds	r7, r4, r6
 8006526:	4297      	cmp	r7, r2
 8006528:	bfde      	ittt	le
 800652a:	19bc      	addle	r4, r7, r6
 800652c:	1bd2      	suble	r2, r2, r7
 800652e:	19ad      	addle	r5, r5, r6
 8006530:	0fcf      	lsrs	r7, r1, #31
 8006532:	3b01      	subs	r3, #1
 8006534:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006538:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800653c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006540:	d1f0      	bne.n	8006524 <__ieee754_sqrt+0x94>
 8006542:	f04f 0c20 	mov.w	ip, #32
 8006546:	469e      	mov	lr, r3
 8006548:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800654c:	42a2      	cmp	r2, r4
 800654e:	eb06 070e 	add.w	r7, r6, lr
 8006552:	dc02      	bgt.n	800655a <__ieee754_sqrt+0xca>
 8006554:	d112      	bne.n	800657c <__ieee754_sqrt+0xec>
 8006556:	428f      	cmp	r7, r1
 8006558:	d810      	bhi.n	800657c <__ieee754_sqrt+0xec>
 800655a:	2f00      	cmp	r7, #0
 800655c:	eb07 0e06 	add.w	lr, r7, r6
 8006560:	da42      	bge.n	80065e8 <__ieee754_sqrt+0x158>
 8006562:	f1be 0f00 	cmp.w	lr, #0
 8006566:	db3f      	blt.n	80065e8 <__ieee754_sqrt+0x158>
 8006568:	f104 0801 	add.w	r8, r4, #1
 800656c:	1b12      	subs	r2, r2, r4
 800656e:	428f      	cmp	r7, r1
 8006570:	bf88      	it	hi
 8006572:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006576:	1bc9      	subs	r1, r1, r7
 8006578:	4433      	add	r3, r6
 800657a:	4644      	mov	r4, r8
 800657c:	0052      	lsls	r2, r2, #1
 800657e:	f1bc 0c01 	subs.w	ip, ip, #1
 8006582:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006586:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800658a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800658e:	d1dd      	bne.n	800654c <__ieee754_sqrt+0xbc>
 8006590:	430a      	orrs	r2, r1
 8006592:	d006      	beq.n	80065a2 <__ieee754_sqrt+0x112>
 8006594:	1c5c      	adds	r4, r3, #1
 8006596:	bf13      	iteet	ne
 8006598:	3301      	addne	r3, #1
 800659a:	3501      	addeq	r5, #1
 800659c:	4663      	moveq	r3, ip
 800659e:	f023 0301 	bicne.w	r3, r3, #1
 80065a2:	106a      	asrs	r2, r5, #1
 80065a4:	085b      	lsrs	r3, r3, #1
 80065a6:	07e9      	lsls	r1, r5, #31
 80065a8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80065ac:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80065b0:	bf48      	it	mi
 80065b2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80065b6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80065ba:	461c      	mov	r4, r3
 80065bc:	e780      	b.n	80064c0 <__ieee754_sqrt+0x30>
 80065be:	0aca      	lsrs	r2, r1, #11
 80065c0:	3815      	subs	r0, #21
 80065c2:	0549      	lsls	r1, r1, #21
 80065c4:	2a00      	cmp	r2, #0
 80065c6:	d0fa      	beq.n	80065be <__ieee754_sqrt+0x12e>
 80065c8:	02d6      	lsls	r6, r2, #11
 80065ca:	d50a      	bpl.n	80065e2 <__ieee754_sqrt+0x152>
 80065cc:	f1c3 0420 	rsb	r4, r3, #32
 80065d0:	fa21 f404 	lsr.w	r4, r1, r4
 80065d4:	1e5d      	subs	r5, r3, #1
 80065d6:	4099      	lsls	r1, r3
 80065d8:	4322      	orrs	r2, r4
 80065da:	1b43      	subs	r3, r0, r5
 80065dc:	e78b      	b.n	80064f6 <__ieee754_sqrt+0x66>
 80065de:	4618      	mov	r0, r3
 80065e0:	e7f0      	b.n	80065c4 <__ieee754_sqrt+0x134>
 80065e2:	0052      	lsls	r2, r2, #1
 80065e4:	3301      	adds	r3, #1
 80065e6:	e7ef      	b.n	80065c8 <__ieee754_sqrt+0x138>
 80065e8:	46a0      	mov	r8, r4
 80065ea:	e7bf      	b.n	800656c <__ieee754_sqrt+0xdc>
 80065ec:	7ff00000 	.word	0x7ff00000

080065f0 <matherr>:
 80065f0:	2000      	movs	r0, #0
 80065f2:	4770      	bx	lr

080065f4 <_init>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr

08006600 <_fini>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	bf00      	nop
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr
